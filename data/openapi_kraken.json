{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api.kraken.com/0",
      "description": "Production Server"
    }
  ],
  "info": {
    "title": "REST API",
    "version": "1.1.0",
    "x-logo": {
      "url": "kraken_logo_w.png",
      "altText": "Kraken Logo"
    },
    "description": "# General Usage\nThis document details use of Kraken's REST API for our Spot exchange. The Spot exchange [Websockets API](https://docs.kraken.com/websockets) and the [Kraken Futures APIs](https://docs.futures.kraken.com/) are documented separately. Our REST API is organised into publicly accessible endpoints (market data, exchange status, etc.), and private authenticated endpoints (trading, funding, user data) which require requests to be signed.\n\nYour use of the Kraken REST API is subject to the [Kraken Terms & Conditions](https://www.kraken.com/legal), [Privacy Notice](http://www.kraken.com/legal/privacy), as well as all other applicable terms and disclosures made available on [www.kraken.com](http://www.kraken.com/).\n\n## Support\nFurther information and FAQs may be found on the [API section](https://support.kraken.com/hc/en-us/sections/4402371110548-API) of our support pages. If you have trouble making any standard requests that our system permits, please [send us a ticket](https://support.kraken.com/hc/en-us/requests/new?ticket_form_id=360000104043) with a full copy of the request(s) that you're attempting, including your IP address and all headers, so that we may investigate further.\n\n## Requests, Responses and Errors\n\n### Requests\nRequest payloads are [form-encoded](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST) (`Content-Type: application/x-www-form-urlencoded`), and all requests must specify a `User-Agent` in their headers.\n\n### Responses\nResponses are JSON encoded and contain one or two top-level keys (`result` and `error` for successful requests or those with warnings, or only `error` for failed or rejected requests)\n\n#### Example Successful Response\n```javascript\n{\n  \"error\": [],\n  \"result\": {\n    \"status\": \"online\",\n    \"timestamp\": \"2021-03-22T17:18:03Z\"\n  }\n}\n```\n> GET https://api.kraken.com/0/public/SystemStatus\n\n#### Example Rejection\n```javascript\n{\n  \"error\": [\n    \"EGeneral:Invalid arguments:ordertype\"\n  ]\n}\n```\n\n### Error Details\n\nHTTP status codes are generally not used by our API to convey information about the state of requests -- any errors or warnings are denoted in the `error` field of the response as described above. Status codes __other__ than 200 indicate that there was an issue with the request reaching our servers.\n\n`error` messages follow the general format `<severity><category>`:`<error msg>`[`:add'l text`]\n\n* `severity` can be either `E` for error or `W` for warning\n* `category` can be one of `General`, `Auth`, `API`, `Query`, `Order`, `Trade`, `Funding`, or `Service`\n* `error msg` can be any text string that describes the reason for the error\n\n#### Some Common Examples\n\n| Error | Additional Info |\n| -- | -- |\n| EGeneral:Invalid arguments | The request payload is malformed, incorrect or ambiguous |\n| EGeneral:Invalid arguments:Index unavailable |  Index pricing is unavailable for stop/profit orders on this pair |\n| EGeneral:Temporary lockout | Too many sequential EAPI:Invalid key errors |\n| EService:Unavailable | The matching engine or API is offline |\n| EService:Market in cancel_only mode | Request can't be made at this time (See `SystemStatus` endpoint) |\n| EService:Market in post_only mode | Request can't be made at this time (See `SystemStatus` endpoint) |   \n| EService:Deadline elapsed | The request timed out according to the default or specified `deadline` |\n| EAPI:Invalid key | An invalid `API-Key` header was supplied (see Authentication section) |\n| EAPI:Invalid signature | An invalid `API-Sign` header was supplied (see Authentication section) |\n| EAPI:Invalid nonce | An invalid `nonce` was supplied (see Authentication section) |\n| EGeneral:Permission denied | API key doesn't have permission to make this request |    \n| EOrder:Cannot open position | User/tier is ineligible for margin trading |\n| EOrder:Margin allowance exceeded | User has exceeded their margin allowance |\n| EOrder:Margin level too low | Client has insufficient equity or collateral |\n| EOrder:Margin position size exceeded | Client would exceed the maximum position size for this pair |\n| EOrder:Insufficient margin | Exchange does not have available funds for this margin trade |\n| EOrder:Insufficient funds | Client does not have the necessary funds |\n| EOrder:Order minimum not met | Order size does not meet `ordermin` (See `AssetPairs` endpoint)  |\n| EOrder:Cost minimum not met | Cost (price * volume) does not meet `costmin` (See `AssetPairs` endpoint) |\n| EOrder:Tick size check failed | Price submitted is not a valid multiple of the pair's tick_size (See `AssetPairs` endpoint) |\n| EOrder:Orders limit exceeded | (See Rate Limits section) |\n| EOrder:Rate limit exceeded | (See Rate Limits section) |\n| EOrder:Domain rate limit exceeded | (See Rate Limits section) |\n| EOrder:Positions limit exceeded |  |\n| EOrder:Unknown position |  |\n| EBM:limit exceeded:CAL | Exceeded [Canadian Acquisition Limits (CAL)](https://support.kraken.com/hc/en-us/articles/15568473780628-CAD-net-purchase-limits-for-certain-cryptocurrencies-in-Canada) |\n| EFunding:Max fee exceeded | Processed fee exceeds `max_fee` set in `Withdraw` request |\n\nAdditional information can be found on our [support center](https://support.kraken.com/hc/en-us/articles/360001491786-API-error-messages).\n\n\n\n# Authentication\n\nAuthenticated requests must include both `API-Key` and `API-Sign` HTTP headers, and `nonce` in the request payload. `otp` is also required in the payload if two-factor authentication (2FA) is enabled.\n\n\n## Nonce and 2FA\n\n### `nonce`\n\nNonce must be an always increasing, unsigned 64-bit integer, for each request that is made with a particular API key. While a simple counter would provide a valid nonce, a more usual method of generating a valid nonce is to use e.g. a UNIX timestamp in milliseconds.\n\n> **Note:** There is no way to reset the nonce for an API key to a lower value, so be sure to use a nonce generation method that won't produce numbers less than the previous nonce. Too many requests with invalid nonces (EAPI:Invalid nonce) can result in temporary bans. Problems can arise from requests arriving out of order due to API keys being shared across processes, or from system clock drift/recalibration. An optional \"nonce window\" can be configured to specify a tolerance between nonce values. Additional info can be found in our [support pages](https://support.kraken.com/hc/en-us/articles/360000906023-What-is-a-nonce-).\n\n### `otp`\n\nIf two-factor authentication (2FA) is enabled for the API key and action in question, the one time password must be specified in the payload's `otp` value.\n\n\n## Headers and Signature\n\nAll responses will include the `x-trace-id` header. This uniquely identifies your request. When contacting support, please include a trace-id where possible.\n\n<SecurityDefinitions />\n\n# Rate Limits\n\nWe have various safeguards in place to protect against system abuse, order book manipulation, DDoS attacks, etc. For REST API requests, these are broadly organised into rate limits specific to the REST API, and rate limits which apply to any trading requests.\n\n> __Note:__ For clients with performance sensitive applications, we strongly recommend the use of our Websockets API for minimising request latency and receiving real-time information, reducing or eliminating the need to frequently poll REST endpoints.\n\n## REST API Rate Limits\n\n### Limits\n\nEvery REST API user has a \"call counter\" which starts at `0`. Ledger/trade history calls increase the counter by `2`. All other API calls increase this counter by `1` (except AddOrder, CancelOrder which operate on a different limiter detailed further below).\n\n| Tier         | Max API Counter | API Counter Decay |\n| ------------ | --------------- | ----------------- |\n| Starter      | 15              | -0.33/sec         |\n| Intermediate | 20              | -0.5/sec          |\n| Pro          | 20              | -1/sec            |\n\nThe user's counter is reduced every couple of seconds depending on their verification tier. Each API key's counter is separate, and if the counter exceeds the maximum value, subsequent calls using that API key would be rate limited. If the rate limits are reached, additional calls will be restricted for a few seconds (or possibly longer if calls continue to be made while the rate limits are active).\n\n> __Note:__ Master accounts and subaccounts will share the same default trading rate limits as determined by the master account's tier. \n\n### Errors\n\n* \"EAPI:Rate limit exceeded\" if the REST API counter exceeds the user's maximum.\n* \"EService: Throttled: [UNIX timestamp]\" if there are too many concurrent requests. Try again after [timestamp].\n\nAdditional information can be found on our [support center](https://support.kraken.com/hc/en-us/articles/206548367-What-are-the-API-rate-limits-).\n\n## Matching Engine Rate Limits\n\n### Limits\n\nSeparate limits apply to the number of orders clients may have open in each pair at a time, and the speed with which they may add and cancel orders in each pair. These limits vary by the account verification tier: \n\n| Tier      | Max Num Orders | Max Ratecount | Ratecount Decay |\n| ----------- | ----------- | ----------- | ----------- |\n| Starter      | 60       | 60 | -1/sec |\n| Intermediate   | 80 | 125 | -2.34/sec |\n| Pro     | 225 | 180 | -3.75/sec |\n\n### Penalties\n\nThe speed is controlled by a ratecounter for each (client, pair) which starts at zero, is incremented when penalties are applied, and decremented according to the decay rates above. A penalty is added to the ratecounter for each new order placed (`AddOrder`) or cancelled (`CancelOrder`, `CancelAll`, `CancelAllOrdersAfter`) on the pair. The cancellation penalty varies according to the lifetime of the order.\n\n| Action       |      | <5sec  | <10sec | <15sec | <45sec | <90sec | <300s | >300s |\n| ------------ | --   | -- | -- | -- | -- | -- | -- | -- |\n| Add Order    | +1   |    |    |    |    |    |    |    |\n| AddOrderBatch***| +(n/2)|    |    |    |    |    |    |    |\n| Edit Order   |      | +6 | +5 | +4 | +2 | +1 | 0  | 0  |\n| Cancel Order |      | +8 | +6 | +5 | +4 | +2 | +1 | 0 |\n| CancelOrderBatch** |      | +8 | +6 | +5 | +4 | +2 | +1 | 0 |\n\n*** n is number of orders in batch\n\n** Rate limits penalty for CancelOrderBatch will be cumulative sum of individual orders penalty, accumulated upto max ratecount. In case, the cumulative penalty in the batch exceeds max ratecount, cancel requests in batch are still accepted.\n\n> __Note:__ A client's exact ratecounter values can be monitored via the Websockets [openOrders](https://docs.kraken.com/websockets/#message-openOrders) feed.\n\n### Errors\n\n* \"EOrder:Orders limit exceeded\" if the number of open orders in a given pair is exceeded\n* \"EOrder:Rate limit exceeded\" if the user's max ratecount is exceeded for a given pair\n\nAdditional information can be found on our [support center](https://support.kraken.com/hc/en-us/articles/360045239571).\n\n# Changelog\n\n* Feb 2024 - Added `maker` and `ledgers` fields to `TradesHistory` and `QueryTrades`.\n* Jan 2024 - Removed support for POST requests to all public endpoints; these requests will now return a 4xx error, please use a GET request instead. Added notes to Balance and Ledger endpoints on migration from Staking to Earn and asset suffixes.\n* Dec 2023 - Added support for `trailing-stop` and `trailing-stop-limit` order types.\n* Nov 2023 - Added `WithdrawMethods` and `WithdrawAddresses` endpoints, and `start`, `end`, `cursor`, and `limit` parameters to `WithdrawStatus`.\n* Oct 2023 - Added `max_fee` parameter to `Withdraw` and `minimum` field in response for `DepositMethods`.\n* Sep 2023 - Added `start`, `end`, `cursor`, and `limit` parameters to `DepositStatus`.\n* Aug 2023 - Added Earn service documentation.\n* July 2023 - Added private `BalanceEx` documentation.\n* June 2023 - Added `amount` parameter to `DepositAddresses`, required for Bitcoin Lightning deposits. Added `count` parameter to `Trades`.\n* May 2023 - Added `address` parameter to `Withdraw`. Added `since` parameter to `Spread`.\n* Mar 2023 - Added `originators` paramater to `DepositStatus`.\n* Feb 2023 - Added long and short margin position limits to `AssetPairs`.\n* Feb 2023 - Specified minimum and maximum number of `txid`s and `userref`s for `CancelOrderBatch`.\n* Feb 2023 - Specified maximum number of responses for `DepositStatus` and `WithdrawStatus`.\n* Feb 2023 - Noted to use `%2b` instead of `+` for URL encoding in `AddOrder` `starttm` and `expiretm` parameters.\n* Jan 2023 - Removed requirement for `asset` in `DepositStatus` and `WithdrawalStatus`.\n* Jan 2023 - Documented `reduce_only` parameter in `AddOrder` and `AddOrderBatch`.\n* Jan 2023 - Added `consolidate_taker` to `TradesHistory`, `ClosedOrders`, and `QueryOrders`.\n* Jan 2023 - Added Subaccounts section with `CreateSubaccount` and `AccountTransfer` endpoints.\n* Jan 2023 - Added `trade_id` to private `TradesHistory`.\n* Dec 2022 - Fixed `pair` parameter restriction on `TradeVolume`.\n* Dec 2022 - `EditOrder` allowed on margin orders.\n* Nov 2022 - Added `tick_size` and `status` parameters to `AssetPairs`, `status` and `collateral_value` to `Assets`, and `trade_id ` to public `Trades`.\n* Oct 2022 - Documented `uv` (unexecuted value) field in `TradeBalance`.\n* Oct 2022 - Added `costmin` trading parameter to `AssetPairs`.\n* Oct 2022 - `Ticker` wildcard support - `pair` no longer required, no `pair` parameter returns tickers for all tradeable exchange assets.\n* Sep 2022 - `AddOrder`/`EditOrder`/`AddOrderBatch` now support icebergs.\n* July 2022 - Added support for restricting API keys to specified IP address(es)/range.\n* June 2022 - Added custom self trade prevention options.\n* May 2022 - Added new REST `AddOrderBatch` endpoint to send multiple new orders and `CancelOrderBatch` endpoint to cancel multiple open orders.\n* Mar 2022 - Added new REST `EditOrder` endpoint to edit volume and price on open orders.\n* Dec 2021 - Added REST `AddOrder` support for optional parameter `trigger` and values `last` (last traded price) and `index`.\n\n\n\n**Note:** Most changes affecting our APIs or trading engine behaviour are currently being tracked on our [Websockets](https://docs.kraken.com/websockets/#changelog) changelog, until these documents are combined.\n\n# Example API Clients\n\nIn order to achieve maximum performance, security and flexibility for your particular needs, we strongly encourage the implementation of this API with your own code, and to minimise reliance on third party software.\n\nThat being said, in order to aid with rapid development and prototyping, we're in the process of producing 'official' API clients in Python and Golang that will be actively maintained, coincident with the release of newer versions of both our Websockets and REST APIs. In the meantime, our Client Engagement team has compiled a number of [code snippets, examples and Postman collections](https://support.kraken.com/hc/en-us/sections/360003946512-Example-API-Code) that many find useful. \n\n### Third Party Software\n\nBelow are other third party API client code libraries that may be used when writing your own API client. Please keep in mind that Payward nor the third party authors are responsible for losses due to bugs or improper use of the APIs. Payward has performed an initial review of the safety of the third party code before listing them but cannot vouch for any changes added since then, or for those that may be stale. If you have concerns, please contact support.\n\n| Language      | Link |\n| ----------- | ----------- |\n| C++ | [https://github.com/voidloop/krakenapi](https://github.com/voidloop/krakenapi) |\n| Golang | [https://github.com/Beldur/kraken-go-api-client](https://github.com/Beldur/kraken-go-api-client) |\n| Python 3 | [https://github.com/veox/python3-krakenex](https://github.com/veox/python3-krakenex)       |\n\nOther \n"
  },
  "paths": {
    "/public/Time": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Server Time",
        "x-summary": "Test123",
        "description": "Get the server's time.\n> Note: Despite working previously, POST requests to this endpoint will now return a 4xx error. Please use a GET request instead.\n",
        "operationId": "getServerTime",
        "security": [],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/time"
                },
                "example": {
                  "error": [],
                  "result": {
                    "unixtime": 1688669448,
                    "rfc1123": "Thu, 06 Jul 23 18:50:48 +0000"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell",
            "label": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/Time\""
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/Time')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/SystemStatus": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get System Status",
        "description": "Get the current system status or trading mode. \n> Note: Despite working previously, POST requests to this endpoint will now return a 4xx error. Please use a GET request instead.\n",
        "operationId": "getSystemStatus",
        "security": [],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "properties": {
                        "status": {
                          "type": "string",
                          "enum": [
                            "online",
                            "maintenance",
                            "cancel_only",
                            "post_only"
                          ],
                          "description": "Current system status:\n* `online`  Kraken is operating normally. All order types may be submitted and trades can occur.\n* `maintenance`  The exchange is offline. No new orders or cancellations may be submitted.\n* `cancel_only`  Resting (open) orders can be cancelled but no new orders may be submitted. No trades will occur.\n* `post_only`  Only post-only limit orders can be submitted. Existing orders may still be cancelled. No trades will occur.\n"
                        },
                        "timestamp": {
                          "type": "string",
                          "description": "Current timestamp (RFC3339)"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "status": "online",
                    "timestamp": "2023-07-06T18:52:00Z"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/SystemStatus\""
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/SystemStatus')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/Assets": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Asset Info",
        "description": "Get information about the assets that are available for deposit, withdrawal, trading and staking.\n> Note: Despite working previously, POST requests to this endpoint will now return a 4xx error. Please use a GET request instead.\n",
        "operationId": "getAssetInfo",
        "security": [],
        "parameters": [
          {
            "$ref": "#/components/parameters/asset"
          },
          {
            "$ref": "#/components/parameters/aclass"
          }
        ],
        "responses": {
          "200": {
            "description": "Asset info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/info-2"
                },
                "example": {
                  "error": [],
                  "result": {
                    "XXBT": {
                      "aclass": "currency",
                      "altname": "XBT",
                      "decimals": 10,
                      "display_decimals": 5,
                      "collateral_value": 1,
                      "status": "enabled"
                    },
                    "ZEUR": {
                      "aclass": "currency",
                      "altname": "EUR",
                      "decimals": 4,
                      "display_decimals": 2,
                      "collateral_value": 1,
                      "status": "enabled"
                    },
                    "ZUSD": {
                      "aclass": "currency",
                      "altname": "USD",
                      "decimals": 4,
                      "display_decimals": 2,
                      "collateral_value": 1,
                      "status": "enabled"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/Assets\"\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/Assets')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/AssetPairs": {
      "get": {
        "tags": [
          "Market Data"
        ],
        "summary": "Get Tradable Asset Pairs",
        "description": "Get tradable asset pairs.\n> Note: Despite working previously, POST requests to this endpoint will now return a 4xx error. Please use a GET request instead.\n",
        "operationId": "getTradableAssetPairs",
        "security": [],
        "parameters": [
          {
            "in": "query",
            "name": "pair",
            "description": "Asset pairs to get data for",
            "schema": {
              "type": "string"
            },
            "example": "BTC/USD,ETH/BTC"
          },
          {
            "in": "query",
            "name": "info",
            "schema": {
              "type": "string",
              "enum": [
                "info",
                "leverage",
                "fees",
                "margin"
              ],
              "default": "info"
            },
            "description": "Info to retrieve (optional)\n\n  * `info` = all info\n  * `leverage` = leverage info\n  * `fees` = fees schedule\n  * `margin` = margin info\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Tradable asset pairs retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "description": "Pair names and their info",
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/components/schemas/pairs"
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "XETHXXBT": {
                      "altname": "ETHXBT",
                      "wsname": "ETH/XBT",
                      "aclass_base": "currency",
                      "base": "XETH",
                      "aclass_quote": "currency",
                      "quote": "XXBT",
                      "lot": "unit",
                      "cost_decimals": 6,
                      "pair_decimals": 5,
                      "lot_decimals": 8,
                      "lot_multiplier": 1,
                      "leverage_buy": [
                        2,
                        3,
                        4,
                        5
                      ],
                      "leverage_sell": [
                        2,
                        3,
                        4,
                        5
                      ],
                      "fees": [
                        [
                          0,
                          0.26
                        ],
                        [
                          50000,
                          0.24
                        ],
                        [
                          100000,
                          0.22
                        ],
                        [
                          250000,
                          0.2
                        ],
                        [
                          500000,
                          0.18
                        ],
                        [
                          1000000,
                          0.16
                        ],
                        [
                          2500000,
                          0.14
                        ],
                        [
                          5000000,
                          0.12
                        ],
                        [
                          10000000,
                          0.1
                        ]
                      ],
                      "fees_maker": [
                        [
                          0,
                          0.16
                        ],
                        [
                          50000,
                          0.14
                        ],
                        [
                          100000,
                          0.12
                        ],
                        [
                          250000,
                          0.1
                        ],
                        [
                          500000,
                          0.08
                        ],
                        [
                          1000000,
                          0.06
                        ],
                        [
                          2500000,
                          0.04
                        ],
                        [
                          5000000,
                          0.02
                        ],
                        [
                          10000000,
                          0
                        ]
                      ],
                      "fee_volume_currency": "ZUSD",
                      "margin_call": 80,
                      "margin_stop": 40,
                      "ordermin": "0.01",
                      "costmin": "0.00002",
                      "tick_size": "0.00001",
                      "status": "online",
                      "long_position_limit": 1100,
                      "short_position_limit": 400
                    },
                    "XXBTZUSD": {
                      "altname": "XBTUSD",
                      "wsname": "XBT/USD",
                      "aclass_base": "currency",
                      "base": "XXBT",
                      "aclass_quote": "currency",
                      "quote": "ZUSD",
                      "lot": "unit",
                      "cost_decimals": 5,
                      "pair_decimals": 1,
                      "lot_decimals": 8,
                      "lot_multiplier": 1,
                      "leverage_buy": [
                        2,
                        3,
                        4,
                        5
                      ],
                      "leverage_sell": [
                        2,
                        3,
                        4,
                        5
                      ],
                      "fees": [
                        [
                          0,
                          0.26
                        ],
                        [
                          50000,
                          0.24
                        ],
                        [
                          100000,
                          0.22
                        ],
                        [
                          250000,
                          0.2
                        ],
                        [
                          500000,
                          0.18
                        ],
                        [
                          1000000,
                          0.16
                        ],
                        [
                          2500000,
                          0.14
                        ],
                        [
                          5000000,
                          0.12
                        ],
                        [
                          10000000,
                          0.1
                        ]
                      ],
                      "fees_maker": [
                        [
                          0,
                          0.16
                        ],
                        [
                          50000,
                          0.14
                        ],
                        [
                          100000,
                          0.12
                        ],
                        [
                          250000,
                          0.1
                        ],
                        [
                          500000,
                          0.08
                        ],
                        [
                          1000000,
                          0.06
                        ],
                        [
                          2500000,
                          0.04
                        ],
                        [
                          5000000,
                          0.02
                        ],
                        [
                          10000000,
                          0
                        ]
                      ],
                      "fee_volume_currency": "ZUSD",
                      "margin_call": 80,
                      "margin_stop": 40,
                      "ordermin": "0.0001",
                      "costmin": "0.5",
                      "tick_size": "0.1",
                      "status": "online",
                      "long_position_limit": 250,
                      "short_position_limit": 200
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/AssetPairs?pair=XXBTZUSD,XETHXXBT\"\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/AssetPairs?pair=XXBTZUSD,XETHXXBT')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/Ticker": {
      "get": {
        "summary": "Get Ticker Information",
        "description": "Get ticker information for all or requested markets. To clarify usage, note that:\n* Today's prices start at midnight UTC\n* Leaving the pair parameter blank will return tickers for all tradeable assets on Kraken\n\n> Note: Despite working previously, POST requests to this endpoint will now return a 4xx error. Please use a GET request instead.\n",
        "tags": [
          "Market Data"
        ],
        "operationId": "getTickerInformation",
        "security": [],
        "parameters": [
          {
            "$ref": "#/components/parameters/wildcard_pair"
          }
        ],
        "responses": {
          "200": {
            "description": "Ticker info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticker-2"
                },
                "example": {
                  "error": [],
                  "result": {
                    "XXBTZUSD": {
                      "a": [
                        "30300.10000",
                        "1",
                        "1.000"
                      ],
                      "b": [
                        "30300.00000",
                        "1",
                        "1.000"
                      ],
                      "c": [
                        "30303.20000",
                        "0.00067643"
                      ],
                      "v": [
                        "4083.67001100",
                        "4412.73601799"
                      ],
                      "p": [
                        "30706.77771",
                        "30689.13205"
                      ],
                      "t": [
                        34619,
                        38907
                      ],
                      "l": [
                        "29868.30000",
                        "29868.30000"
                      ],
                      "h": [
                        "31631.00000",
                        "31631.00000"
                      ],
                      "o": "30502.80000"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/Ticker?pair=XBTUSD\"\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/Ticker?pair=XBTUSD')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/OHLC": {
      "get": {
        "summary": "Get OHLC Data",
        "description": "Get OHLC (open/high/low/close, otherwise known as candle) data for a given market. Note that the last entry in the OHLC array is for the current, not-yet-committed frame and will always be present, regardless of the value of `since`.\n> Note: Despite working previously, POST requests to this endpoint will now return a 4xx error. Please use a GET request instead.\n",
        "tags": [
          "Market Data"
        ],
        "operationId": "getOHLCData",
        "security": [],
        "parameters": [
          {
            "$ref": "#/components/parameters/pair"
          },
          {
            "name": "interval",
            "description": "Time frame interval in minutes",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1,
              "enum": [
                1,
                5,
                15,
                30,
                60,
                240,
                1440,
                10080,
                21600
              ]
            },
            "example": 60
          },
          {
            "name": "since",
            "in": "query",
            "description": "Return up to 720 OHLC data points since given timestamp",
            "schema": {
              "type": "integer"
            },
            "example": 1548111600
          }
        ],
        "responses": {
          "200": {
            "description": "OHLC data retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ohlc"
                },
                "example": {
                  "error": [],
                  "result": {
                    "XXBTZUSD": [
                      [
                        1688671200,
                        "30306.1",
                        "30306.2",
                        "30305.7",
                        "30305.7",
                        "30306.1",
                        "3.39243896",
                        23
                      ],
                      [
                        1688671260,
                        "30304.5",
                        "30304.5",
                        "30300.0",
                        "30300.0",
                        "30300.0",
                        "4.42996871",
                        18
                      ],
                      [
                        1688671320,
                        "30300.3",
                        "30300.4",
                        "30291.4",
                        "30291.4",
                        "30294.7",
                        "2.13024789",
                        25
                      ],
                      [
                        1688671380,
                        "30291.8",
                        "30295.1",
                        "30291.8",
                        "30295.0",
                        "30293.8",
                        "1.01836275",
                        9
                      ]
                    ],
                    "last": 1688672160
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/OHLC?pair=XBTUSD\"\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/OHLC?pair=XBTUSD')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/Depth": {
      "get": {
        "summary": "Get Order Book",
        "description": "Get current order book details.\n> Note: Despite working previously, POST requests to this endpoint will now return a 4xx error. Please use a GET request instead.\n",
        "tags": [
          "Market Data"
        ],
        "operationId": "getOrderBook",
        "security": [],
        "parameters": [
          {
            "$ref": "#/components/parameters/pair"
          },
          {
            "name": "count",
            "description": "Maximum number of asks/bids",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 500,
              "default": 100
            },
            "example": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Order book entries retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/depth"
                },
                "example": {
                  "error": [],
                  "result": {
                    "XXBTZUSD": {
                      "asks": [
                        [
                          "30384.10000",
                          "2.059",
                          1688671659
                        ],
                        [
                          "30387.90000",
                          "1.500",
                          1688671380
                        ],
                        [
                          "30393.70000",
                          "9.871",
                          1688671261
                        ]
                      ],
                      "bids": [
                        [
                          "30297.00000",
                          "1.115",
                          1688671636
                        ],
                        [
                          "30296.70000",
                          "2.002",
                          1688671674
                        ],
                        [
                          "30289.80000",
                          "5.001",
                          1688671673
                        ]
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/Depth?pair=XBTUSD\"\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/Depth?pair=XBTUSD')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/Trades": {
      "get": {
        "summary": "Get Recent Trades",
        "description": "Returns the last 1000 trades by default.\n> Note: Despite working previously, POST requests to this endpoint will now return a 4xx error. Please use a GET request instead.\n",
        "tags": [
          "Market Data"
        ],
        "operationId": "getRecentTrades",
        "security": [],
        "parameters": [
          {
            "$ref": "#/components/parameters/pair"
          },
          {
            "name": "since",
            "in": "query",
            "description": "Return trade data since given timestamp",
            "schema": {
              "type": "string"
            },
            "example": "1616663618"
          },
          {
            "name": "count",
            "in": "query",
            "description": "Return specific number of trades, up to 1000",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 1000
            },
            "example": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Trade data retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/trades"
                },
                "example": {
                  "error": [],
                  "result": {
                    "XXBTZUSD": [
                      [
                        "30243.40000",
                        "0.34507674",
                        1688669597.8277369,
                        "b",
                        "m",
                        "",
                        61044952
                      ],
                      [
                        "30243.30000",
                        "0.00376960",
                        1688669598.2804112,
                        "s",
                        "l",
                        "",
                        61044953
                      ],
                      [
                        "30243.30000",
                        "0.01235716",
                        1688669602.698379,
                        "s",
                        "m",
                        "",
                        61044956
                      ]
                    ],
                    "last": "1688671969993150842"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/Trades?pair=XBTUSD\"\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/Trades?pair=XBTUSD')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/public/Spread": {
      "get": {
        "summary": "Get Recent Spreads",
        "description": "Returns the last ~200 top-of-book spreads for a given pair.\n> Note: Despite working previously, POST requests to this endpoint will now return a 4xx error. Please use a GET request instead.\n",
        "tags": [
          "Market Data"
        ],
        "operationId": "getRecentSpreads",
        "security": [],
        "parameters": [
          {
            "$ref": "#/components/parameters/pair"
          },
          {
            "name": "since",
            "in": "query",
            "description": "Returns spread data since given timestamp. Optional, intended for incremental updates within available dataset (does not contain all historical spreads).",
            "schema": {
              "type": "integer"
            },
            "example": 1678219570
          }
        ],
        "responses": {
          "200": {
            "description": "Spread data retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/spread-2"
                },
                "example": {
                  "error": [],
                  "result": {
                    "XXBTZUSD": [
                      [
                        1688671834,
                        "30292.10000",
                        "30297.50000"
                      ],
                      [
                        1688671834,
                        "30292.10000",
                        "30296.70000"
                      ],
                      [
                        1688671834,
                        "30292.70000",
                        "30296.70000"
                      ]
                    ],
                    "last": 1688672106
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl \"https://api.kraken.com/0/public/Spread?pair=XBTUSD\"\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nresp = requests.get('https://api.kraken.com/0/public/Spread?pair=XBTUSD')\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/GetWebSocketsToken": {
      "post": {
        "summary": "Get Websockets Token",
        "description": "An authentication token must be requested via this REST API endpoint in order to connect to and authenticate with our [Websockets API](https://docs.kraken.com/websockets/#authentication). The token should be used within 15 minutes of creation, but it does not expire once a successful Websockets connection and private subscription has been made and is maintained.\n\n**API Key Permissions Required:** `WebSocket interface - On`\n",
        "tags": [
          "Websockets Authentication"
        ],
        "operationId": "getWebsocketsToken",
        "requestBody": {
          "$ref": "#/components/requestBodies/nonceOnly"
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/GetWebSocketsToken\" \\\n    -H 'API-Key: <YOUR-API-KEY>' \\\n    -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n    -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n    --data-urlencode \"nonce=<YOUR-NONCE>\" \n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\nresp = kraken_request('/0/private/GetWebSocketsToken', {\n    \"nonce\": str(int(1000*time.time()))\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Websockets token retrieved.",
            "content": {
              "application/json": {
                "example": {
                  "error": [],
                  "result": {
                    "token": "1Dwc4lzSwNWOAwkMdqhssNNFhs1ed606d1WcF3XfEMw",
                    "expires": 900
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "token": {
                          "description": "Websockets token",
                          "type": "string"
                        },
                        "expires": {
                          "description": "Time (in seconds) after which the token expires",
                          "type": "integer"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/private/Balance": {
      "post": {
        "summary": "Get Account Balance",
        "description": "Retrieve all cash balances, net of pending withdrawals.\n\n> **Note on Staking/Earn assets:** We have begun to migrate assets from our legacy Staking system over to a new Earn system. As such, the following assets may appear in your balances and ledger. Please see our [Support article](https://support.kraken.com/hc/en-us/articles/360039879471-What-is-Asset-S-and-Asset-M-) for more details.\n> * `.B`, which represents balances in new yield-bearing products, similar to `.S` (staked) and `.M` (opt-in rewards) balances\n> * `.F`, which represents balances earning automatically in Kraken Rewards\n\n**API Key Permissions Required:** `Funds permissions - Query`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "getAccountBalance",
        "requestBody": {
          "$ref": "#/components/requestBodies/nonceOnly"
        },
        "responses": {
          "200": {
            "description": "Account balances retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/balance-2"
                },
                "example": {
                  "error": [],
                  "result": {
                    "ZUSD": "171288.6158",
                    "ZEUR": "504861.8946",
                    "XXBT": "1011.1908877900",
                    "XETH": "818.5500000000",
                    "USDT": "500000.00000000",
                    "DAI": "9999.9999999999",
                    "DOT": "2.5000000000",
                    "ETH2.S": "198.3970800000",
                    "ETH2": "2.5885574330",
                    "USD.M": "1213029.2780"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/Balance\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/Balance', {\n    \"nonce\": str(int(1000*time.time()))\n}, api_key, api_sec)\n\nprint(resp.json())        \n"
          }
        ]
      }
    },
    "/private/BalanceEx": {
      "post": {
        "summary": "Get Extended Balance",
        "description": "Retrieve all extended account balances, including credits and held amounts. Balance available for trading is calculated as: `available balance = balance + credit - credit_used - hold_trade`\n\n> **Note on Staking/Earn assets:** We have begun to migrate assets from our legacy Staking system over to a new Earn system. As such, the following assets may appear in your balances and ledger. Please see our [Support article](https://support.kraken.com/hc/en-us/articles/360039879471-What-is-Asset-S-and-Asset-M-) for more details.\n> * `.B`, which represents balances in new yield-bearing products, similar to `.S` (staked) and `.M` (opt-in rewards) balances\n> * `.F`, which represents balances earning automatically in Kraken Rewards\n\n**API Key Permissions Required:** `Funds permissions - Query`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "getExtendedBalance",
        "requestBody": {
          "$ref": "#/components/requestBodies/nonceOnly"
        },
        "responses": {
          "200": {
            "description": "Extended account balances retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/balanceex-2"
                },
                "example": {
                  "error": [],
                  "result": {
                    "ZUSD": {
                      "balance": 25435.21,
                      "hold_trade": 8249.76
                    },
                    "XXBT": {
                      "balance": 1.2435,
                      "hold_trade": 0.8423
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/BalanceEx\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/BalanceEx', {\n    \"nonce\": str(int(1000*time.time()))\n}, api_key, api_sec)\n\nprint(resp.json())        \n"
          }
        ]
      }
    },
    "/private/TradeBalance": {
      "post": {
        "summary": "Get Trade Balance",
        "description": "Retrieve a summary of collateral balances, margin position valuations, equity and margin level.\n\n**API Key Permissions Required:** `Orders and trades - Query open orders & trades`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "getTradeBalance",
        "requestBody": {
          "$ref": "#/components/requestBodies/balance"
        },
        "responses": {
          "200": {
            "description": "Trade balances retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/balance-4"
                },
                "example": {
                  "error": [],
                  "result": {
                    "eb": "1101.3425",
                    "tb": "392.2264",
                    "m": "7.0354",
                    "n": "-10.0232",
                    "c": "21.1063",
                    "v": "31.1297",
                    "e": "382.2032",
                    "mf": "375.1678",
                    "ml": "5432.57"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/TradeBalance\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&asset=ZUSD\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/TradeBalance', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"USD\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/OpenOrders": {
      "post": {
        "summary": "Get Open Orders",
        "description": "Retrieve information about currently open orders.\n\n**API Key Permissions Required:** `Orders and trades - Query open orders & trades`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "getOpenOrders",
        "requestBody": {
          "$ref": "#/components/requestBodies/openOrders"
        },
        "responses": {
          "200": {
            "description": "Open orders info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/open-2"
                },
                "example": {
                  "error": [],
                  "result": {
                    "open": {
                      "OQCLML-BW3P3-BUCMWZ": {
                        "refid": "None",
                        "userref": 0,
                        "status": "open",
                        "opentm": 1688666559.8974,
                        "starttm": 0,
                        "expiretm": 0,
                        "descr": {
                          "pair": "XBTUSD",
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "30010.0",
                          "price2": "0",
                          "leverage": "none",
                          "order": "buy 1.25000000 XBTUSD @ limit 30010.0",
                          "close": ""
                        },
                        "vol": "1.25000000",
                        "vol_exec": "0.37500000",
                        "cost": "11253.7",
                        "fee": "0.00000",
                        "price": "30010.0",
                        "stopprice": "0.00000",
                        "limitprice": "0.00000",
                        "misc": "",
                        "oflags": "fciq",
                        "trades": [
                          "TCCCTY-WE2O6-P3NB37"
                        ]
                      },
                      "OB5VMB-B4U2U-DK2WRW": {
                        "refid": "None",
                        "userref": 45326,
                        "status": "open",
                        "opentm": 1688665899.5699,
                        "starttm": 0,
                        "expiretm": 0,
                        "descr": {
                          "pair": "XBTUSD",
                          "type": "buy",
                          "ordertype": "limit",
                          "price": "14500.0",
                          "price2": "0",
                          "leverage": "5:1",
                          "order": "buy 0.27500000 XBTUSD @ limit 14500.0 with 5:1 leverage",
                          "close": ""
                        },
                        "vol": "0.27500000",
                        "vol_exec": "0.00000000",
                        "cost": "0.00000",
                        "fee": "0.00000",
                        "price": "0.00000",
                        "stopprice": "0.00000",
                        "limitprice": "0.00000",
                        "misc": "",
                        "oflags": "fciq"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/OpenOrders\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&trades=true\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/OpenOrders', {\n    \"nonce\": str(int(1000*time.time())),\n    \"trades\": True\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/ClosedOrders": {
      "post": {
        "summary": "Get Closed Orders",
        "description": "Retrieve information about orders that have been closed (filled or cancelled). 50 results are returned at a time, the most recent by default.\n\n**Note:** If an order's tx ID is given for `start` or `end` time, the order's opening time (`opentm`) is used\n\n**API Key Permissions Required:** `Orders and trades - Query closed orders & trades`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "getClosedOrders",
        "requestBody": {
          "$ref": "#/components/requestBodies/closedOrders"
        },
        "responses": {
          "200": {
            "description": "Closed orders info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/closed-2"
                },
                "example": {
                  "error": [],
                  "result": {
                    "closed": {
                      "O37652-RJWRT-IMO74O": {
                        "refid": "None",
                        "userref": 1,
                        "status": "canceled",
                        "reason": "User requested",
                        "opentm": 1688148493.7708,
                        "closetm": 1688148610.0482,
                        "starttm": 0,
                        "expiretm": 0,
                        "descr": {
                          "pair": "XBTGBP",
                          "type": "buy",
                          "ordertype": "stop-loss-limit",
                          "price": "23667.0",
                          "price2": "0",
                          "leverage": "none",
                          "order": "buy 0.00100000 XBTGBP @ limit 23667.0",
                          "close": ""
                        },
                        "vol": "0.00100000",
                        "vol_exec": "0.00000000",
                        "cost": "0.00000",
                        "fee": "0.00000",
                        "price": "0.00000",
                        "stopprice": "0.00000",
                        "limitprice": "0.00000",
                        "misc": "",
                        "oflags": "fciq",
                        "trigger": "index"
                      },
                      "O6YDQ5-LOMWU-37YKEE": {
                        "refid": "None",
                        "userref": 36493663,
                        "status": "canceled",
                        "reason": "User requested",
                        "opentm": 1688148493.7708,
                        "closetm": 1688148610.0477,
                        "starttm": 0,
                        "expiretm": 0,
                        "descr": {
                          "pair": "XBTEUR",
                          "type": "buy",
                          "ordertype": "take-profit-limit",
                          "price": "27743.0",
                          "price2": "0",
                          "leverage": "none",
                          "order": "buy 0.00100000 XBTEUR @ limit 27743.0",
                          "close": ""
                        },
                        "vol": "0.00100000",
                        "vol_exec": "0.00000000",
                        "cost": "0.00000",
                        "fee": "0.00000",
                        "price": "0.00000",
                        "stopprice": "0.00000",
                        "limitprice": "0.00000",
                        "misc": "",
                        "oflags": "fciq",
                        "trigger": "index"
                      }
                    },
                    "count": 2
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/ClosedOrders\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&trades=true\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/ClosedOrders', {\n    \"nonce\": str(int(1000*time.time())),\n    \"userref\": 36493663\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/QueryOrders": {
      "post": {
        "summary": "Query Orders Info",
        "description": "Retrieve information about specific orders.\n\n**API Key Permissions Required:** `Orders and trades - Query open orders & trades` or `Orders and trades - Query closed orders & trades`, depending on status of order\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "getOrdersInfo",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/query"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Orders info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/query-2"
                },
                "example": {
                  "error": [],
                  "result": {
                    "OBCMZD-JIEE7-77TH3F": {
                      "refid": "None",
                      "userref": 0,
                      "status": "closed",
                      "reason": null,
                      "opentm": 1688665496.7808,
                      "closetm": 1688665499.1922,
                      "starttm": 0,
                      "expiretm": 0,
                      "descr": {
                        "pair": "XBTUSD",
                        "type": "buy",
                        "ordertype": "stop-loss-limit",
                        "price": "27500.0",
                        "price2": "0",
                        "leverage": "none",
                        "order": "buy 1.25000000 XBTUSD @ limit 27500.0",
                        "close": ""
                      },
                      "vol": "1.25000000",
                      "vol_exec": "1.25000000",
                      "cost": "27526.2",
                      "fee": "26.2",
                      "price": "27500.0",
                      "stopprice": "0.00000",
                      "limitprice": "0.00000",
                      "misc": "",
                      "oflags": "fciq",
                      "trigger": "index",
                      "trades": [
                        "TZX2WP-XSEOP-FP7WYR"
                      ]
                    },
                    "OMMDB2-FSB6Z-7W3HPO": {
                      "refid": "None",
                      "userref": 0,
                      "status": "closed",
                      "reason": null,
                      "opentm": 1688592012.2317,
                      "closetm": 1688592012.2335,
                      "starttm": 0,
                      "expiretm": 0,
                      "descr": {
                        "pair": "XBTUSD",
                        "type": "sell",
                        "ordertype": "market",
                        "price": "0",
                        "price2": "0",
                        "leverage": "none",
                        "order": "sell 0.25000000 XBTUSD @ market",
                        "close": ""
                      },
                      "vol": "0.25000000",
                      "vol_exec": "0.25000000",
                      "cost": "7500.0",
                      "fee": "7.5",
                      "price": "30000.0",
                      "stopprice": "0.00000",
                      "limitprice": "0.00000",
                      "misc": "",
                      "oflags": "fcib",
                      "trades": [
                        "TJUW2K-FLX2N-AR2FLU"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/QueryOrders\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&trades=true\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/QueryOrders', {\n    \"nonce\": str(int(1000*time.time())),\n    \"txid\": \"OBCMZD-JIEE7-77TH3F,OMMDB2-FSB6Z-7W3HPO\",\n    \"trades\": True\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/TradesHistory": {
      "post": {
        "summary": "Get Trades History",
        "description": "Retrieve information about trades/fills. 50 results are returned at a time, the most recent by default.\n* Unless otherwise stated, costs, fees, prices, and volumes are specified with the precision for the asset pair (`pair_decimals` and `lot_decimals`), not the individual assets' precision (`decimals`).\n\n**API Key Permissions Required:** `Orders and trades - Query closed orders & trades`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "getTradeHistory",
        "requestBody": {
          "$ref": "#/components/requestBodies/history"
        },
        "responses": {
          "200": {
            "description": "Trade history retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/history-2"
                },
                "example": {
                  "error": [],
                  "result": {
                    "trades": {
                      "THVRQM-33VKH-UCI7BS": {
                        "ordertxid": "OQCLML-BW3P3-BUCMWZ",
                        "postxid": "TKH2SE-M7IF5-CFI7LT",
                        "pair": "XXBTZUSD",
                        "time": 1688667796.8802,
                        "type": "buy",
                        "ordertype": "limit",
                        "price": "30010.00000",
                        "cost": "600.20000",
                        "fee": "0.00000",
                        "vol": "0.02000000",
                        "margin": "0.00000",
                        "misc": "",
                        "ledgers": [
                          "L4JP5S-GWFOA-EANKPU",
                          "LPHHII-KGAWE-Q2FR5R"
                        ],
                        "trade_id": 40274859,
                        "maker": true
                      },
                      "TCWJEG-FL4SZ-3FKGH6": {
                        "ordertxid": "OQCLML-BW3P3-BUCMWZ",
                        "postxid": "TKH2SE-M7IF5-CFI7LT",
                        "pair": "XXBTZUSD",
                        "time": 1688667769.6396,
                        "type": "buy",
                        "ordertype": "limit",
                        "price": "30010.00000",
                        "cost": "300.10000",
                        "fee": "0.00000",
                        "vol": "0.01000000",
                        "margin": "0.00000",
                        "misc": "",
                        "ledgers": [
                          "L2KP1S-GFFIA-EDNHPU",
                          "LPSHAH-KQAVE-Q4FR9L"
                        ],
                        "trade_id": 39482674,
                        "maker": true
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/TradesHistory\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&trades=true\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/TradesHistory', {\n    \"nonce\": str(int(1000*time.time()))\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/QueryTrades": {
      "post": {
        "summary": "Query Trades Info",
        "description": "Retrieve information about specific trades/fills.\n\n**API Key Permissions Required:** `Orders and trades - Query closed orders & trades`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "getTradesInfo",
        "requestBody": {
          "$ref": "#/components/requestBodies/query"
        },
        "responses": {
          "200": {
            "description": "Trades info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "description": "Trade info",
                      "type": "object",
                      "additionalProperties": {
                        "x-additionalPropertiesName": "txid",
                        "$ref": "#/components/schemas/trade-2"
                      }
                    },
                    "error": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/error"
                      }
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "THVRQM-33VKH-UCI7BS": {
                      "ordertxid": "OQCLML-BW3P3-BUCMWZ",
                      "postxid": "TKH2SE-M7IF5-CFI7LT",
                      "pair": "XXBTZUSD",
                      "time": 1688667796.8802,
                      "type": "buy",
                      "ordertype": "limit",
                      "price": "30010.00000",
                      "cost": "600.20000",
                      "fee": "0.00000",
                      "vol": "0.02000000",
                      "margin": "0.00000",
                      "misc": "",
                      "trade_id": 93748276,
                      "maker": true
                    },
                    "TTEUX3-HDAAA-RC2RUO": {
                      "ordertxid": "OH76VO-UKWAD-PSBDX6",
                      "postxid": "TKH2SE-M7IF5-CFI7LT",
                      "pair": "XXBTZEUR",
                      "time": 1688082549.3138,
                      "type": "buy",
                      "ordertype": "limit",
                      "price": "27732.00000",
                      "cost": "0.20020",
                      "fee": "0.00000",
                      "vol": "0.00020000",
                      "margin": "0.00000",
                      "misc": "",
                      "trade_id": 74625834,
                      "maker": true
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/QueryTrades\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&txid=TRWCIF-3MJWU-5DYJG5,TNGJFU-5CD67-ZV3AEO\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/QueryTrades', {\n    \"nonce\": str(int(1000*time.time())),\n    \"txid\": \"THVRQM-33VKH-UCI7BS,TTEUX3-HDAAA-RC2RUO\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/OpenPositions": {
      "post": {
        "summary": "Get Open Positions",
        "description": "Get information about open margin positions.\n\n**API Key Permissions Required:** `Orders and trades - Query open orders & trades`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "getOpenPositions",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "txid": {
                    "type": "string",
                    "description": "Comma delimited list of txids to limit output to"
                  },
                  "docalcs": {
                    "type": "boolean",
                    "description": "Whether to include P&L calculations",
                    "default": false
                  },
                  "consolidation": {
                    "type": "string",
                    "description": "Consolidate positions by market/pair",
                    "enum": [
                      "market"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Open positions info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "object",
                      "additionalProperties": {
                        "x-additionalPropertiesName": "txid",
                        "properties": {
                          "ordertxid": {
                            "type": "string",
                            "description": "Order ID responsible for the position"
                          },
                          "posstatus": {
                            "type": "string",
                            "description": "Position status",
                            "enum": [
                              "open"
                            ]
                          },
                          "pair": {
                            "type": "string",
                            "description": "Asset pair"
                          },
                          "time": {
                            "type": "number",
                            "description": "Unix timestamp of trade"
                          },
                          "type": {
                            "type": "string",
                            "description": "Direction (buy/sell) of position"
                          },
                          "ordertype": {
                            "type": "string",
                            "description": "Order type used to open position"
                          },
                          "cost": {
                            "type": "string",
                            "description": "Opening cost of position (in quote currency)"
                          },
                          "fee": {
                            "type": "string",
                            "description": "Opening fee of position (in quote currency)"
                          },
                          "vol": {
                            "type": "string",
                            "description": "Position opening size (in base currency)"
                          },
                          "vol_closed": {
                            "type": "string",
                            "description": "Quantity closed (in base currency)"
                          },
                          "margin": {
                            "type": "string",
                            "description": "Initial margin consumed (in quote currency)"
                          },
                          "value": {
                            "type": "string",
                            "description": "Current value of remaining position (if `docalcs` requested)"
                          },
                          "net": {
                            "type": "string",
                            "description": "Unrealised P&L of remaining position (if `docalcs` requested)"
                          },
                          "terms": {
                            "type": "string",
                            "description": "Funding cost and term of position"
                          },
                          "rollovertm": {
                            "type": "string",
                            "description": "Timestamp of next margin rollover fee"
                          },
                          "misc": {
                            "type": "string",
                            "description": "Comma delimited list of add'l info"
                          },
                          "oflags": {
                            "type": "string",
                            "description": "Comma delimited list of opening order flags"
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "TF5GVO-T7ZZ2-6NBKBI": {
                      "ordertxid": "OLWNFG-LLH4R-D6SFFP",
                      "posstatus": "open",
                      "pair": "XXBTZUSD",
                      "time": 1605280097.8294,
                      "type": "buy",
                      "ordertype": "limit",
                      "cost": "104610.52842",
                      "fee": "289.06565",
                      "vol": "8.82412861",
                      "vol_closed": "0.20200000",
                      "margin": "20922.10568",
                      "value": "258797.5",
                      "net": "+154186.9728",
                      "terms": "0.0100% per 4 hours",
                      "rollovertm": "1616672637",
                      "misc": "",
                      "oflags": ""
                    },
                    "T24DOR-TAFLM-ID3NYP": {
                      "ordertxid": "OIVYGZ-M5EHU-ZRUQXX",
                      "posstatus": "open",
                      "pair": "XXBTZUSD",
                      "time": 1607943827.3172,
                      "type": "buy",
                      "ordertype": "limit",
                      "cost": "145756.76856",
                      "fee": "335.24057",
                      "vol": "8.00000000",
                      "vol_closed": "0.00000000",
                      "margin": "29151.35371",
                      "value": "240124.0",
                      "net": "+94367.2314",
                      "terms": "0.0100% per 4 hours",
                      "rollovertm": "1616672637",
                      "misc": "",
                      "oflags": ""
                    },
                    "TYMRFG-URRG5-2ZTQSD": {
                      "ordertxid": "OF5WFH-V57DP-QANDAC",
                      "posstatus": "open",
                      "pair": "XXBTZUSD",
                      "time": 1610448039.8374,
                      "type": "buy",
                      "ordertype": "limit",
                      "cost": "0.00240",
                      "fee": "0.00000",
                      "vol": "0.00000010",
                      "vol_closed": "0.00000000",
                      "margin": "0.00048",
                      "value": "0",
                      "net": "+0.0006",
                      "terms": "0.0100% per 4 hours",
                      "rollovertm": "1616672637",
                      "misc": "",
                      "oflags": ""
                    },
                    "TAFGBN-TZNFC-7CCYIM": {
                      "ordertxid": "OF5WFH-V57DP-QANDAC",
                      "posstatus": "open",
                      "pair": "XXBTZUSD",
                      "time": 1610448039.8448,
                      "type": "buy",
                      "ordertype": "limit",
                      "cost": "2.40000",
                      "fee": "0.00264",
                      "vol": "0.00010000",
                      "vol_closed": "0.00000000",
                      "margin": "0.48000",
                      "value": "3.0",
                      "net": "+0.6015",
                      "terms": "0.0100% per 4 hours",
                      "rollovertm": "1616672637",
                      "misc": "",
                      "oflags": ""
                    },
                    "T4O5L3-4VGS4-IRU2UL": {
                      "ordertxid": "OF5WFH-V57DP-QANDAC",
                      "posstatus": "open",
                      "pair": "XXBTZUSD",
                      "time": 1610448040.7722,
                      "type": "buy",
                      "ordertype": "limit",
                      "cost": "21.59760",
                      "fee": "0.02376",
                      "vol": "0.00089990",
                      "vol_closed": "0.00000000",
                      "margin": "4.31952",
                      "value": "27.0",
                      "net": "+5.4133",
                      "terms": "0.0100% per 4 hours",
                      "rollovertm": "1616672637",
                      "misc": "",
                      "oflags": ""
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/OpenPositions', {\n    \"nonce\": str(int(1000*time.time())),\n    \"docalcs\": True\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/Ledgers": {
      "post": {
        "summary": "Get Ledgers Info",
        "description": "Retrieve information about ledger entries. 50 results are returned at a time, the most recent by default.\n\n> **Note on Staking/Earn assets:** We have begun to migrate assets from our legacy Staking system over to a new Earn system. As such, the following assets may appear in your balances and ledger. Please see our [Support article](https://support.kraken.com/hc/en-us/articles/360039879471-What-is-Asset-S-and-Asset-M-) for more details.\n> * `.B`, which represents balances in new yield-bearing products, similar to `.S` (staked) and `.M` (opt-in rewards) balances\n> * `.F`, which represents balances earning automatically in Kraken Rewards\n\n**API Key Permissions Required:** `Data - Query ledger entries`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "getLedgers",
        "requestBody": {
          "$ref": "#/components/requestBodies/info"
        },
        "responses": {
          "200": {
            "description": "Ledgers info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/info-3"
                },
                "example": {
                  "error": [],
                  "result": {
                    "ledger": {
                      "L4UESK-KG3EQ-UFO4T5": {
                        "refid": "TJKLXF-PGMUI-4NTLXU",
                        "time": 1688464484.1787,
                        "type": "trade",
                        "subtype": "",
                        "aclass": "currency",
                        "asset": "ZGBP",
                        "amount": "-24.5000",
                        "fee": "0.0490",
                        "balance": "459567.9171"
                      },
                      "LMKZCZ-Z3GVL-CXKK4H": {
                        "refid": "TBZIP2-F6QOU-TMB6FY",
                        "time": 1688444262.8888,
                        "type": "trade",
                        "subtype": "",
                        "aclass": "currency",
                        "asset": "ZUSD",
                        "amount": "0.9852",
                        "fee": "0.0010",
                        "balance": "52732.1132"
                      }
                    },
                    "count": 2
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/Ledgers\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n    \n# Construct the request and print the result\nresp = kraken_request('/0/private/Ledgers', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"GBP\",\n    \"start\": 1610124514\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/QueryLedgers": {
      "post": {
        "summary": "Query Ledgers",
        "description": "Retrieve information about specific ledger entries. \n\n> **Note on Staking/Earn assets:** We have begun to migrate assets from our legacy Staking system over to a new Earn system. As such, the following assets may appear in your balances and ledger. Please see our [Support article](https://support.kraken.com/hc/en-us/articles/360039879471-What-is-Asset-S-and-Asset-M-) for more details.\n> * `.B`, which represents balances in new yield-bearing products, similar to `.S` (staked) and `.M` (opt-in rewards) balances\n> * `.F`, which represents balances earning automatically in Kraken Rewards\n\n**API Key Permissions Required:** `Data - Query ledger entries`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "getLedgersInfo",
        "requestBody": {
          "$ref": "#/components/requestBodies/query-2"
        },
        "responses": {
          "200": {
            "description": "Ledgers info retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/query-3"
                },
                "example": {
                  "error": [],
                  "result": {
                    "L4UESK-KG3EQ-UFO4T5": {
                      "refid": "TJKLXF-PGMUI-4NTLXU",
                      "time": 1688464484.1787,
                      "type": "trade",
                      "subtype": "",
                      "aclass": "currency",
                      "asset": "ZGBP",
                      "amount": "-24.5000",
                      "fee": "0.0490",
                      "balance": "459567.9171"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/QueryLedgers\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&id=LGBRJU-SQZ4L-5HLS3C,L3S26P-BHIOV-TTWYYI\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/QueryLedgers', {\n    \"nonce\": str(int(1000*time.time())),\n    \"id\": \"L4UESK-KG3EQ-UFO4T5\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/TradeVolume": {
      "post": {
        "summary": "Get Trade Volume",
        "description": "Returns 30 day USD trading volume and resulting fee schedule for any asset pair(s) provided. Fees will not be included if `pair` is not specified as Kraken fees differ by asset pair.\nNote: If an asset pair is on a maker/taker fee schedule, the taker side is given in `fees` and maker side in `fees_maker`. For pairs not on maker/taker, they will only be given in `fees`.\n\n**API Key Permissions Required:** `Funds permissions - Query`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "getTradeVolume",
        "requestBody": {
          "$ref": "#/components/requestBodies/volume"
        },
        "responses": {
          "200": {
            "description": "Trade Volume retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/volume"
                },
                "example": {
                  "error": [],
                  "result": {
                    "currency": "ZUSD",
                    "volume": "200709587.4223",
                    "fees": {
                      "XXBTZUSD": {
                        "fee": "0.1000",
                        "minfee": "0.1000",
                        "maxfee": "0.2600",
                        "nextfee": null,
                        "nextvolume": null,
                        "tiervolume": "10000000.0000"
                      }
                    },
                    "fees_maker": {
                      "XXBTZUSD": {
                        "fee": "0.0000",
                        "minfee": "0.0000",
                        "maxfee": "0.1600",
                        "nextfee": null,
                        "nextvolume": null,
                        "tiervolume": "10000000.0000"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/TradeVolume\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>&pair=XETCXETH\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/TradeVolume', {\n    \"nonce\": str(int(1000*time.time())),\n    \"pair\": \"XBTUSD\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/AddExport": {
      "post": {
        "summary": "Request Export Report",
        "description": "Request export of trades or ledgers.\n\n**API Key Permissions Required:** `Data - Export data`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "addExport",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "report",
                  "description"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "report": {
                    "type": "string",
                    "description": "Type of data to export",
                    "enum": [
                      "trades",
                      "ledgers"
                    ]
                  },
                  "format": {
                    "type": "string",
                    "description": "File format to export",
                    "enum": [
                      "CSV",
                      "TSV"
                    ],
                    "default": "CSV"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description for the export"
                  },
                  "fields": {
                    "type": "string",
                    "default": "all",
                    "description": "Comma-delimited list of fields to include\n\n* `trades`: ordertxid, time, ordertype, price, cost, fee, vol, margin, misc, ledgers\n* `ledgers`: refid, time, type, aclass, asset, amount, fee, balance\n"
                  },
                  "starttm": {
                    "type": "integer",
                    "description": "UNIX timestamp for report start time (default 1st of the current month)"
                  },
                  "endtm": {
                    "type": "integer",
                    "description": "UNIX timestamp for report end time (default now)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Export request made",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "Report ID"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "id": "TCJA"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/AddExport', {\n    \"nonce\": str(int(1000*time.time())),\n    \"description\":\"my_trades_1\",\n    \"format\":\"CSV\",\n    \"report\":\"trades\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/ExportStatus": {
      "post": {
        "summary": "Get Export Report Status",
        "description": "Get status of requested data exports.\n\n**API Key Permissions Required:** `Data - Export data`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "exportStatus",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "report"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "report": {
                    "type": "string",
                    "description": "Type of reports to inquire about",
                    "enum": [
                      "trades",
                      "ledgers"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Export status retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Report ID"
                          },
                          "descr": {
                            "type": "string"
                          },
                          "format": {
                            "type": "string"
                          },
                          "report": {
                            "type": "string"
                          },
                          "subtype": {
                            "type": "string"
                          },
                          "status": {
                            "type": "string",
                            "description": "Status of the report",
                            "enum": [
                              "Queued",
                              "Processing",
                              "Processed"
                            ]
                          },
                          "flags": {
                            "type": "string",
                            "deprecated": true
                          },
                          "fields": {
                            "type": "string"
                          },
                          "createdtm": {
                            "type": "string",
                            "description": "UNIX timestamp of report request"
                          },
                          "expiretm": {
                            "type": "string",
                            "deprecated": true
                          },
                          "starttm": {
                            "type": "string",
                            "description": "UNIX timestamp report processing began"
                          },
                          "completedtm": {
                            "type": "string",
                            "description": "UNIX timestamp report processing finished"
                          },
                          "datastarttm": {
                            "type": "string",
                            "description": "UNIX timestamp of the report data start time"
                          },
                          "dataendtm": {
                            "type": "string",
                            "description": "UNIX timestamp of the report data end time"
                          },
                          "aclass": {
                            "type": "string",
                            "deprecated": true
                          },
                          "asset": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": [
                    {
                      "id": "VSKC",
                      "descr": "my_trades_1",
                      "format": "CSV",
                      "report": "trades",
                      "subtype": "all",
                      "status": "Processed",
                      "flags": "0",
                      "fields": "all",
                      "createdtm": "1688669085",
                      "expiretm": "1688878685",
                      "starttm": "1688669093",
                      "completedtm": "1688669093",
                      "datastarttm": "1683556800",
                      "dataendtm": "1688669085",
                      "aclass": "forex",
                      "asset": "all"
                    },
                    {
                      "id": "TCJA",
                      "descr": "my_trades_1",
                      "format": "CSV",
                      "report": "trades",
                      "subtype": "all",
                      "status": "Processed",
                      "flags": "0",
                      "fields": "all",
                      "createdtm": "1688363637",
                      "expiretm": "1688573237",
                      "starttm": "1688363664",
                      "completedtm": "1688363664",
                      "datastarttm": "1683235200",
                      "dataendtm": "1688363637",
                      "aclass": "forex",
                      "asset": "all"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/ExportStatus', {\n    \"nonce\": str(int(1000*time.time())),\n    \"report\":\"trades\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/RetrieveExport": {
      "post": {
        "summary": "Retrieve Data Export",
        "description": "Retrieve a processed data export \n\n**API Key Permissions Required:** `Data - Export data`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "retrieveExport",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "id"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "id": {
                    "type": "string",
                    "description": "Report ID to retrieve"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data export report retrieved",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "properties": {
                    "report": {
                      "type": "string",
                      "format": "binary",
                      "description": "Binary zip archive containing the report"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/RetrieveExport', {\n    \"nonce\": str(int(1000*time.time())),\n    \"id\":\"TCJA\"\n}, api_key, api_sec)\n\n# Write export to a new file 'myexport.zip'\ntarget_path = 'myexport.zip'\nhandle = open(target_path, \"wb\")\nfor chunk in resp.iter_content(chunk_size=512):\n    if chunk:  # filter out keep-alive new chunks\n        handle.write(chunk)\nhandle.close()\n"
          }
        ]
      }
    },
    "/private/RemoveExport": {
      "post": {
        "summary": "Delete Export Report",
        "description": "Delete exported trades/ledgers report\n\n**API Key Permissions Required:** `Data - Export data`\n",
        "tags": [
          "Account Data"
        ],
        "operationId": "removeExport",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "id",
                  "type"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "id": {
                    "type": "string",
                    "description": "ID of report to delete or cancel"
                  },
                  "type": {
                    "type": "string",
                    "description": "`delete` can only be used for reports that have already been processed. Use `cancel` for queued or processing reports.\n",
                    "enum": [
                      "cancel",
                      "delete"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Export report deleted or cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "delete": {
                          "type": "boolean",
                          "description": "Whether deletion was successful"
                        },
                        "cancel": {
                          "type": "boolean",
                          "description": "Whether cancellation was successful"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "delete": true
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/RemoveExport', {\n    \"nonce\": str(int(1000*time.time())),\n    \"id\":\"TCJA\",\n    \"type\":\"delete\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/AddOrder": {
      "post": {
        "summary": "Add Order",
        "description": "Place a new order.\n\n**Note**: See the [AssetPairs](#operation/getTradableAssetPairs) endpoint for details on the available trading pairs, their price and quantity precisions, order minimums, available leverage, etc.\n\n**API Key Permissions Required:** `Orders and trades - Create & modify orders`\n",
        "tags": [
          "Trading"
        ],
        "operationId": "addOrder",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/add"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/add-2"
                },
                "examples": {
                  "Limit": {
                    "value": {
                      "error": [],
                      "result": {
                        "descr": {
                          "order": "buy 1.25000000 XBTUSD @ limit 27500.0"
                        },
                        "txid": [
                          "OU22CG-KLAF2-FWUDD7"
                        ]
                      }
                    }
                  },
                  "Limit with conditional stop-loss": {
                    "value": {
                      "error": [],
                      "result": {
                        "descr": {
                          "order": "buy 2.12340000 XBTUSD @ limit 25000.1 with 2:1 leverage",
                          "close": "close position @ stop loss 22000.0 -> limit 21000.0"
                        },
                        "txid": [
                          "OUF4EM-FRGI2-MQMWZD"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "// buy 2.1234 XBTUSD @ limit $45,000.1\n// with 2:1 leverage, with a follow up stop loss\n\ncurl -X \"POST\" \"https://api.kraken.com/0/private/AddOrder\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\"\n     --data-urlencode \"pair=XXBTZUSD\" \\\n     --data-urlencode \"type=buy\" \\\n     --data-urlencode \"ordertype=limit\" \\\n     --data-urlencode \"price=45000.1\" \\\n     --data-urlencode \"volume=2.1234\" \\\n     --data-urlencode \"leverage=2:1\" \\\n     --data-urlencode \"close[ordertype]=stop-loss-limit\" \\\n     --data-urlencode \"close[price]=38000\" \\\n     --data-urlencode \"close[price2]=36000\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/AddOrder', {\n    \"nonce\": str(int(1000*time.time())),\n    \"ordertype\": \"limit\",\n    \"type\": \"buy\",\n    \"volume\": 1.25,\n    \"pair\": \"XBTUSD\",\n    \"price\": 27500\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/AddOrderBatch": {
      "post": {
        "summary": "Add Order Batch",
        "description": "Send an array of orders (max: 15).\nAny orders rejected due to order validations, will be dropped and the rest of the batch is processed. All orders in batch should be limited to a single pair.\nThe order of returned txid's in the response array is the same as the order of the order list sent in request.\n\n**Note**: See the [AssetPairs](#operation/getTradableAssetPairs) endpoint for details on the available trading pairs, their price and quantity precisions, order minimums, available leverage, etc.\n\n**API Key Permissions Required:** `Orders and trades - Create & modify orders`\n",
        "tags": [
          "Trading"
        ],
        "operationId": "addOrderBatch",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/batchadd"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Orders added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/batchadd-2"
                },
                "examples": {
                  "Limits": {
                    "value": {
                      "error": [],
                      "result": {
                        "orders": [
                          {
                            "txid": "65LRD3-AHGRA-YAH8E5",
                            "descr": {
                              "order": "buy 1.02010000 XBTUSD @ limit 29000.0"
                            }
                          },
                          {
                            "txid": "OK8HFF-5J2PL-XLR17S",
                            "descr": {
                              "order": "sell 0.14000000 XBTUSD @ limit 40000.0"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "Limits, one with conditional stop-loss": {
                    "value": {
                      "error": [],
                      "result": {
                        "orders": [
                          {
                            "txid": "O5OR23-ADFAD-Y2G61C",
                            "descr": {
                              "order": "buy 0.80300000 XBTUSD @ limit 28300.0"
                            },
                            "close": "close position @ stop loss 27000.0 -> limit 26000.0"
                          },
                          {
                            "txid": "9K6KFS-5H3PL-XBRC7A",
                            "descr": {
                              "order": "sell 0.10500000 XBTUSD @ limit 36000.0"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "// Send buy and sell BTC/USD \n\n\ncurl -X \"POST\" \"https://api.kraken.com/0/private/AddOrderBatch\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/json' \\\n     {\n       \"deadline\": \"2022-05-24T14:15:22Z\",\n       \"nonce\": \"<YOUR-NOUNCE>\",\n       \"orders\": [\n         {\n           \"close\": {\"ordertype\": \"stop-loss-limit\",\n                     \"price\": \"37000\",\n                     \"price2\": \"36000\"},\n           \"ordertype\": \"limit\",\n           \"price\": \"40000\",\n           \"price2\": \"string\",\n           \"timeinforce\": \"GTC\",\n           \"type\": \"buy\",\n           \"userref\": \"345\",\n           \"volume\": \"1.2\"\n          },\n          {\n           \"ordertype\": \"limit\",\n           \"price\": \"42000\",\n           \"starttm\": \"string\",\n           \"timeinforce\": \"GTC\",\n           \"type\": \"sell\",\n           \"userref\": \"123\",\n           \"volume\": \"1.2\"\n        }\n       ],\n      \n       \"pair\": \"BTC/USD\",\n       \"validate\": \"false\"\n      }\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\nimport json\nimport urllib.parse\nimport hashlib\nimport hmac\nimport base64\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, json=data)\n    return req\n\ndef get_kraken_signature(urlpath, data, secret):\n    postdata = json.dumps(data)\n    encoded = (str(data['nonce']) + postdata).encode()\n    message = urlpath.encode() + hashlib.sha256(encoded).digest()\n    mac = hmac.new(base64.b64decode(secret), message, hashlib.sha512)\n    sigdigest = base64.b64encode(mac.digest())\n    return sigdigest.decode()\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/AddOrderBatch', {\n       \"orders\": [\n         {\n           \"close\": {\"ordertype\": \"stop-loss-limit\",\n                     \"price\": \"37000\",\n                     \"price2\": \"36000\"},\n           \"ordertype\": \"limit\",\n           \"price\": \"40000\",\n           \"price2\": \"string\",\n           \"timeinforce\": \"GTC\",\n           \"type\": \"buy\",\n           \"userref\": \"123\",\n           \"volume\": \"1.2\"\n          },\n          {\n           \"ordertype\": \"limit\",\n           \"price\": \"42000\",\n           \"starttm\": \"string\",\n           \"timeinforce\": \"GTC\",\n           \"type\": \"sell\",\n           \"userref\": \"345\",\n           \"volume\": \"1.2\"\n        }\n       ],\n       \"deadline\": \"2022-05-24T14:15:22Z\",\n       \"nonce\": \"<YOUR-NOUNCE>\",          \n       \"pair\": \"BTC/USD\",\n       \"validate\": \"false\"\n      }\n, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/EditOrder": {
      "post": {
        "summary": "Edit Order",
        "description": "Edit volume and price on open orders. Uneditable orders include triggered stop/profit orders, orders with conditional close terms attached, those already cancelled or filled, and those where the executed volume is greater than the newly supplied volume. post-only flag is not retained from original order after successful edit. post-only needs to be explicitly set on edit request.\n\n**Note**: See the [AssetPairs](#operation/getTradableAssetPairs) endpoint for details on the available trading pairs, their price and quantity precisions, order minimums, available leverage, etc.\n\n**API Key Permissions Required:** `Orders and trades - Create & modify orders`\n",
        "tags": [
          "Trading"
        ],
        "operationId": "editOrder",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/edit"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order edited.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/edit-2"
                },
                "examples": {
                  "Limit": {
                    "value": {
                      "error": [],
                      "result": {
                        "descr": {
                          "order": "buy 1.25000000 XBTUSD @ limit 27500.0"
                        },
                        "txid": "OU22CG-KLAF2-FWUDD7"
                      }
                    }
                  },
                  "Limit with conditional stop-loss": {
                    "value": {
                      "error": [],
                      "result": {
                        "status": "ok",
                        "txid": "OFVXHJ-KPQ3B-VS7ELA",
                        "originaltxid": "OHYO67-6LP66-HMQ437",
                        "volume": "0.00030000",
                        "price": "19500.0",
                        "price2": "32500.0",
                        "orders_cancelled": 1,
                        "descr": {
                          "order": "buy 0.00030000 XXBTZGBP @ limit 19500.0"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/EditOrder\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\"\n     --data-urlencode \"pair=XXBTZUSD\" \\\n     --data-urlencode \"txid=OHYO67-6LP66-HMQ437\" \\\n     --data-urlencode \"ordertype=limit\" \\\n     --data-urlencode \"price=45000.1\" \\\n    --data-urlencode \"price2=46000.1\" \\\n     --data-urlencode \"volume=2.1234\" \\\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/EditOrder', {\n    \"nonce\": str(int(1000*time.time())),\n    \"txid\": \"OHYO67-6LP66-HMQ437\",\n    \"volume\": 1.25,\n    \"pair\": \"XBTUSD\",\n    \"price\": 27500,\n    \"price2\": 26500\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/CancelOrder": {
      "post": {
        "summary": "Cancel Order",
        "description": "Cancel a particular open order (or set of open orders) by `txid` or `userref`\n\n**API Key Permissions Required:** `Orders and trades - Create & modify orders` or `Orders and trades - Cancel & close orders`\n",
        "tags": [
          "Trading"
        ],
        "operationId": "cancelOrder",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/cancel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Open order cancelled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cancel-2"
                },
                "example": {
                  "error": [],
                  "result": {
                    "count": 1
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/CancelOrder\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\"\n     --data-urlencode \"txid=OYVGEW-VYV5B-UUEXSK\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/CancelOrder', {\n    \"nonce\": str(int(1000*time.time())),\n    \"txid\": \"OG5V2Y-RYKVL-DT3V3B\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/CancelAll": {
      "post": {
        "summary": "Cancel All Orders",
        "description": "Cancel all open orders\n\n**API Key Permissions Required:** `Orders and trades - Create & modify orders` or `Orders and trades - Cancel & close orders`\n",
        "tags": [
          "Trading"
        ],
        "operationId": "cancelAllOrders",
        "requestBody": {
          "$ref": "#/components/requestBodies/nonceOnly"
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/CancelAll\" \\\n    -H 'API-Key: <YOUR-API-KEY>' \\\n    -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n    -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n    --data-urlencode \"nonce=<YOUR-NONCE>\"  \n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\nresp = kraken_request('/0/private/CancelAll', {\n    \"nonce\": str(int(1000*time.time()))\n}, api_key, api_sec)\n\nprint(resp.json())      \n"
          }
        ],
        "responses": {
          "200": {
            "description": "Open orders cancelled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cancel-2"
                },
                "example": {
                  "error": [],
                  "result": {
                    "count": 4
                  }
                }
              }
            }
          }
        }
      }
    },
    "/private/CancelAllOrdersAfter": {
      "post": {
        "summary": "Cancel All Orders After X",
        "tags": [
          "Trading"
        ],
        "operationId": "cancelAllOrdersAfter",
        "description": "CancelAllOrdersAfter provides a \"Dead Man's Switch\" mechanism to protect the client from network malfunction, extreme latency or unexpected matching engine downtime. The client can send a request with a timeout (in seconds), that will start a countdown timer which will cancel *all* client orders when the timer expires. The client has to keep sending new requests to push back the trigger time, or deactivate the mechanism by specifying a timeout of 0. If the timer expires, all orders are cancelled and then the timer remains disabled until the client provides a new (non-zero) timeout.\n\nThe recommended use is to make a call every 15 to 30 seconds, providing a timeout of 60 seconds. This allows the client to keep the orders in place in case of a brief disconnection or transient delay, while keeping them safe in case of a network breakdown. It is also recommended to disable the timer ahead of regularly scheduled trading engine maintenance (if the timer is enabled, all orders will be cancelled when the trading engine comes back from downtime - planned or otherwise).\n\n**API Key Permissions Required:** `Orders and trades - Create & modify orders` or `Orders and trades - Cancel & close orders`\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "timeout"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "timeout": {
                    "type": "integer",
                    "description": "Duration (in seconds) to set/extend the timer, should be less than 86400 seconds"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Dead man's switch timer reset or disabled.",
            "content": {
              "application/json": {
                "example": {
                  "error": [],
                  "result": {
                    "currentTime": "2023-03-24T17:41:56Z",
                    "triggerTime": "2023-03-24T17:42:56Z"
                  }
                },
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "currentTime": {
                          "description": "Timestamp (RFC3339 format) at which the request was received",
                          "type": "string"
                        },
                        "triggerTime": {
                          "description": "Timestamp (RFC3339 format) after which all orders will be cancelled, unless the timer is extended or disabled",
                          "type": "string"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/CancelAllOrdersAfter\" \\\n    -H 'API-Key: <YOUR-API-KEY>' \\\n    -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n    -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n    --data-urlencode \"nonce=<YOUR-NONCE>\" \\\n    --data-urlencode \"timeout=60\" \n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/CancelAllOrdersAfter', {\n    \"nonce\": str(int(1000*time.time())),\n    \"timeout\": 60\n}, api_key, api_sec)\n\nprint(resp.json())    \n"
          }
        ]
      }
    },
    "/private/CancelOrderBatch": {
      "post": {
        "summary": "Cancel Order Batch",
        "description": "Cancel multiple open orders  by `txid` or `userref` (maximum 50 total unique IDs/references)\n\n**API Key Permissions Required:** `Orders and trades - Create & modify orders` or `Orders and trades - Cancel & close orders`\n",
        "tags": [
          "Trading"
        ],
        "operationId": "cancelOrderBatch",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/batchcancel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Open order cancelled.",
            "content": {
              "application/json": {
                "example": {
                  "error": [],
                  "result": {
                    "count": 2
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/CancelOrderBatch\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/json' \\ \n      {\n      \"nonce\": \"string\",\n      \"orders\": [\"OG5V2Y-RYKVL-DT3V3B\",\"OP5V2Y-RYKVL-ET3V3B\"],\n      }\n\n      \n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\nimport json\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=json.dumps(data))\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/CancelOrderBatch', {\n    \"nonce\": str(int(1000*time.time())),\n    \"orders\": [\"OG5V2Y-RYKVL-DT3V3B\",\"OP5V2Y-RYKVL-ET3V3B\"]\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/DepositMethods": {
      "post": {
        "summary": "Get Deposit Methods",
        "description": "Retrieve methods available for depositing a particular asset.\n\n**API Key Permissions Required:** `Funds permissions - Query` and `Funds permissions - Deposit`\n",
        "tags": [
          "Funding"
        ],
        "operationId": "getDepositMethods",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/methods"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deposit methods retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/methods-2"
                },
                "example": {
                  "error": [],
                  "result": [
                    {
                      "method": "Bitcoin",
                      "limit": false,
                      "fee": "0.0000000000",
                      "gen-address": true,
                      "minimum": "0.00010000"
                    },
                    {
                      "method": "Bitcoin Lightning",
                      "limit": false,
                      "fee": "0.00000000",
                      "minimum": "0.00010000"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/DepositMethods\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\" \\\n     --data-urlencode \"asset=XBT\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/DepositMethods', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/DepositAddresses": {
      "post": {
        "summary": "Get Deposit Addresses",
        "description": "Retrieve (or generate a new) deposit addresses for a particular asset and method.\n\n**API Key Permissions Required:** `Funds permissions - Query`\n",
        "tags": [
          "Funding"
        ],
        "operationId": "getDepositAddresses",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/addresses"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deposit addresses retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addresses-2"
                },
                "example": {
                  "error": [],
                  "result": [
                    {
                      "address": "2N9fRkx5JTWXWHmXzZtvhQsufvoYRMq9ExV",
                      "expiretm": "0",
                      "new": true
                    },
                    {
                      "address": "2NCpXUCEYr8ur9WXM1tAjZSem2w3aQeTcAo",
                      "expiretm": "0",
                      "new": true
                    },
                    {
                      "address": "2Myd4eaAW96ojk38A2uDK4FbioCayvkEgVq",
                      "expiretm": "0"
                    },
                    {
                      "address": "rLHzPsX3oXdzU2qP17kHCH2G4csZv1rAJh",
                      "expiretm": "0",
                      "new": true,
                      "tag": "1361101127"
                    },
                    {
                      "address": "krakenkraken",
                      "expiretm": "0",
                      "memo": "4150096490"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/DepositAddresses\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\" \\\n     --data-urlencode \"asset=XBT\" \\\n     --data-urlencode \"method=Bitcoin\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/DepositAddresses', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\",\n    \"method\": \"Bitcoin\",\n    \"new\": True\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/DepositStatus": {
      "post": {
        "summary": "Get Status of Recent Deposits",
        "description": "Retrieve information about recent deposits. Results are sorted by recency, use the `cursor` parameter to iterate through list of deposits (page size equal to value of `limit`) from newest to oldest.\n\n**API Key Permissions Required:** `Funds permissions - Query`\n",
        "tags": [
          "Funding"
        ],
        "operationId": "getStatusRecentDeposits",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/recent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recent deposits retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recent-2"
                },
                "example": {
                  "error": [],
                  "result": [
                    {
                      "method": "Bitcoin",
                      "aclass": "currency",
                      "asset": "XXBT",
                      "refid": "FTQcuak-V6Za8qrWnhzTx67yYHz8Tg",
                      "txid": "6544b41b607d8b2512baf801755a3a87b6890eacdb451be8a94059fb11f0a8d9",
                      "info": "2Myd4eaAW96ojk38A2uDK4FbioCayvkEgVq",
                      "amount": "0.78125000",
                      "fee": "0.0000000000",
                      "time": 1688992722,
                      "status": "Success",
                      "status-prop": "return"
                    },
                    {
                      "method": "Ether (Hex)",
                      "aclass": "currency",
                      "asset": "XETH",
                      "refid": "FTQcuak-V6Za8qrPnhsTx47yYLz8Tg",
                      "txid": "0x339c505eba389bf2c6bebb982cc30c6d82d0bd6a37521fa292890b6b180affc0",
                      "info": "0xca210f4121dc891c9154026c3ae3d1832a005048",
                      "amount": "0.1383862742",
                      "time": 1688992722,
                      "status": "Settled",
                      "status-prop": "onhold",
                      "originators": [
                        "0x70b6343b104785574db2c1474b3acb3937ab5de7346a5b857a78ee26954e0e2d",
                        "0x5b32f6f792904a446226b17f607850d0f2f7533cdc35845bfe432b5b99f55b66"
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/DepositStatus\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\" \\\n     --data-urlencode \"asset=XBT\" \\\n     --data-urlencode \"method=Bitcoin\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/DepositStatus', {\n    \"nonce\": str(int(1000*time.time()))\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/WithdrawMethods": {
      "post": {
        "summary": "Get Withdrawal Methods",
        "description": "Retrieve a list of withdrawal methods available for the user.\n\n**API Key Permissions Required:** `Funds permissions - Query` and `Funds permissions - Withdraw`\n",
        "tags": [
          "Funding"
        ],
        "operationId": "getWithdrawalMethods",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/methods-3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Withdrawal methods retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/methods-4"
                },
                "example": {
                  "error": [],
                  "result": [
                    {
                      "asset": "XXBT",
                      "method": "Bitcoin",
                      "network": "Bitcoin",
                      "minimum": "0.0004"
                    },
                    {
                      "asset": "XXBT",
                      "method": "Bitcoin Lightning",
                      "network": "Lightning",
                      "minimum": "0.00001"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/WithdrawMethods\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\" \\\n     --data-urlencode \"asset=XBT\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/WithdrawMethods', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/WithdrawAddresses": {
      "post": {
        "summary": "Get Withdrawal Addresses",
        "description": "Retrieve a list of withdrawal addresses available for the user.\n\n**API Key Permissions Required:** `Funds permissions - Query` and `Funds permissions - Withdraw`\n",
        "tags": [
          "Funding"
        ],
        "operationId": "getWithdrawalAddresses",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/addresses-3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Withdrawal addresses retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/addresses-4"
                },
                "example": {
                  "error": [],
                  "result": [
                    {
                      "address": "bc1qxdsh4sdd29h6ldehz0se5c61asq8cgwyjf2y3z",
                      "asset": "XBT",
                      "method": "Bitcoin",
                      "key": "btc-wallet-1",
                      "verified": true
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X \"POST\" \"https://api.kraken.com/0/private/WithdrawAddresses\" \\\n     -H 'API-Key: <YOUR-API-KEY>' \\\n     -H 'API-Sign: <YOUR-MSG-SIGNATURE>' \\\n     -H 'Content-Type: application/x-www-form-urlencoded; charset=utf-8' \\\n     --data-urlencode \"nonce=<YOUR-NONCE>\" \\\n     --data-urlencode \"asset=XBT\"\n"
          },
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/WithdrawAddresses', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/WithdrawInfo": {
      "post": {
        "summary": "Get Withdrawal Information",
        "description": "Retrieve fee information about potential withdrawals for a particular asset, key and amount.\n\n**API Key Permissions Required:** `Funds permissions - Query` and `Funds permissions - Withdraw`\n",
        "tags": [
          "Funding"
        ],
        "operationId": "getWithdrawalInformation",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/info-4"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Withdrawal information retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/info-5"
                },
                "example": {
                  "error": [],
                  "result": {
                    "method": "Bitcoin",
                    "limit": "332.00956139",
                    "amount": "0.72480000",
                    "fee": "0.00020000"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/WithdrawInfo', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\",\n    \"key\": \"btc_testnet_with1\",\n    \"amount\": 0.725\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/Withdraw": {
      "post": {
        "summary": "Withdraw Funds",
        "description": "Make a withdrawal request.    \n\n**API Key Permissions Required:** `Funds permissions - Withdraw`  \n",
        "tags": [
          "Funding"
        ],
        "operationId": "withdrawFunds",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/withdrawal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Withdrawal created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/withdrawal-2"
                },
                "example": {
                  "error": [],
                  "result": {
                    "refid": "FTQcuak-V6Za8qrWnhzTx67yYHz8Tg"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/Withdraw', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\",\n    \"key\": \"btc_testnet_with1\",\n    \"address\": \"bc1kar0ssrr7xf3vy5l6d3lydnwkre5og2zz3f5ldq\",\n    \"amount\": 0.725\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/WithdrawStatus": {
      "post": {
        "summary": "Get Status of Recent Withdrawals",
        "description": "Retrieve information about recent withdrawals. Results are sorted by recency, use the `cursor` parameter to iterate through list of withdrawals (page size equal to value of `limit`) from newest to oldest.\n\n**API Key Permissions Required:** `Funds permissions - Withdraw` or `Data - Query ledger entries`\n",
        "tags": [
          "Funding"
        ],
        "operationId": "getStatusRecentWithdrawals",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/recent-3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Recent withdrawals retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recent-4"
                },
                "example": {
                  "error": [],
                  "result": [
                    {
                      "method": "Bitcoin",
                      "aclass": "currency",
                      "asset": "XXBT",
                      "refid": "FTQcuak-V6Za8qrWnhzTx67yYHz8Tg",
                      "txid": "29323ce235cee8dae22503caba7....8ad3a506879a03b1e87992923d80428",
                      "info": "bc1qm32pq....3ewt0j37s2g",
                      "amount": "0.72485000",
                      "fee": "0.00020000",
                      "time": 1688014586,
                      "status": "Pending",
                      "key": "btc-wallet-1"
                    },
                    {
                      "method": "Bitcoin",
                      "aclass": "currency",
                      "asset": "XXBT",
                      "refid": "FTQcuak-V6Za8qrPnhsTx47yYLz8Tg",
                      "txid": "29323ce212ceb2daf81255cbea8a5...ad7a626471e05e1f82929501e82934",
                      "info": "bc1qa35ls....3egf0872h3w",
                      "amount": "0.72485000",
                      "fee": "0.00020000",
                      "time": 1688015423,
                      "status": "Failure",
                      "status-prop": "canceled",
                      "key": "btc-wallet-2"
                    }
                  ]
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/WithdrawStatus', {\n    \"nonce\": str(int(1000*time.time()))\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/WithdrawCancel": {
      "post": {
        "summary": "Request Withdrawal Cancelation",
        "description": "Cancel a recently requested withdrawal, if it has not already been successfully processed.\n\n**API Key Permissions Required:** `Funds permissions - Withdraw`, unless withdrawal is a `WalletTransfer`, then no permissions are required.\n",
        "tags": [
          "Funding"
        ],
        "operationId": "cancelWithdrawal",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/cancel-3"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Withdrawal cancellation requested.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "description": "Whether cancellation was successful or not."
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": true
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/WithdrawCancel', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\",\n    \"refid\": \"FTQcuak-V6Za8qrWnhzTx67yYHz8Tg\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/WalletTransfer": {
      "post": {
        "summary": "Request Wallet Transfer",
        "description": "Transfer from a Kraken spot wallet to a Kraken Futures wallet. Note that a transfer in the other direction must be requested via the Kraken Futures API endpoint for [withdrawals to Spot wallets](https://docs.futures.kraken.com/\\#http-api-trading-v3-api-transfers-initiate-withdrawal-to-spot-wallet).\n",
        "tags": [
          "Funding"
        ],
        "operationId": "walletTransfer",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "asset",
                  "from",
                  "to",
                  "amount"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "asset": {
                    "type": "string",
                    "description": "Asset to transfer (asset ID or `altname`)",
                    "example": "XBT"
                  },
                  "from": {
                    "type": "string",
                    "description": "Source wallet",
                    "enum": [
                      "Spot Wallet"
                    ]
                  },
                  "to": {
                    "type": "string",
                    "description": "Destination wallet",
                    "enum": [
                      "Futures Wallet"
                    ]
                  },
                  "amount": {
                    "type": "string",
                    "description": "Amount to transfer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transfer created.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "refid": {
                          "type": "string",
                          "description": "Reference ID",
                          "example": "FTQcuak-V6Za8qrWnhzTx67yYHz8Tg"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "refid": "FTQcuak-V6Za8qrWnhzTx67yYHz8Tg"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)             \n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/WalletTransfer', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"ETH\",\n    \"amount\": 0.100,\n    \"from\":\"Spot Wallet\",\n    \"to\":\"Futures Wallet\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/CreateSubaccount": {
      "post": {
        "summary": "Create Subaccount",
        "description": "Create a trading subaccount.\n",
        "tags": [
          "Subaccounts"
        ],
        "operationId": "createSubaccount",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "email",
                  "username"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "username": {
                    "type": "string",
                    "description": "Username for the subaccount"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address for the subaccount"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subaccount created.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "boolean",
                      "description": "Whether subaccount creation was successful or not."
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": true
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)\n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/CreateSubaccount', {\n    \"nonce\": str(int(1000*time.time())),\n    \"username\": \"abc123\",\n    \"email\": \"abc123@gmail.com\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/AccountTransfer": {
      "post": {
        "summary": "Account Transfer",
        "description": "Transfer funds to and from master and subaccounts. **Note:** `AccountTransfer` must be called by the master account.\n",
        "tags": [
          "Subaccounts"
        ],
        "operationId": "accountTransfer",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "asset",
                  "amount",
                  "from",
                  "to"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "asset": {
                    "type": "string",
                    "description": "Asset being transferred"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Amount of asset to transfer"
                  },
                  "from": {
                    "type": "string",
                    "description": "IIBAN of the source account"
                  },
                  "to": {
                    "type": "string",
                    "description": "IIBAN of the destination account"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Funds transferred between accounts.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "transfer_id": {
                          "type": "string",
                          "description": "Transfer ID"
                        },
                        "status": {
                          "type": "string",
                          "description": "Transfer status, either `\"pending\"` or `\"complete\"`"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "transfer_id": "TOH3AS2-LPCWR8-JDQGEU",
                    "status": "complete"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)\n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/AccountTransfer', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XBT\",\n    \"amount\": 1.0,\n    \"from\": \"ABCD 1234 EFGH 5678\"\n    \"to\": \"IJKL 0987 MNOP 6543\"\n}, api_key, api_sec)\n\nprint(resp.json())  \n  \n"
          }
        ]
      }
    },
    "/private/Stake": {
      "post": {
        "deprecated": true,
        "summary": "Stake Asset",
        "description": "Deprecated: Please use the `Earn` endpoints instead.\n\nStake an asset from your spot wallet.\n\n**API Key Permissions Required:** `Funds permissions - Withdraw`\n",
        "tags": [
          "Staking"
        ],
        "operationId": "stake",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "asset",
                  "amount",
                  "method"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "asset": {
                    "type": "string",
                    "description": "Asset to stake (asset ID or `altname`)",
                    "example": "XBT"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Amount of the asset to stake"
                  },
                  "method": {
                    "type": "string",
                    "description": "Name of the staking option to use (refer to the [Staking Assets](#tag/User-Staking/operation/getStakingAssetInfo) endpoint for the correct method names for each asset)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Staking successful.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "refid": {
                          "type": "string",
                          "description": "Reference ID",
                          "example": "BOG5AE5-KSCNR4-VPNPEV"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "refid": "BOG5AE5-KSCNR4-VPNPEV"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)\n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/Stake', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XXBT\",\n    \"amount\": 0.1,\n    \"method\": \"xbt-staked\"\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/Unstake": {
      "post": {
        "deprecated": true,
        "summary": "Unstake Asset",
        "description": "Deprecated: Please use the `Earn` endpoints instead.\n\nUnstake an asset from your staking wallet.\n\n**API Key Permissions Required:** `Funds permissions - Withdraw`\n",
        "tags": [
          "Staking"
        ],
        "operationId": "unstake",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce",
                  "asset",
                  "amount"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "asset": {
                    "type": "string",
                    "description": "Asset to unstake (asset ID or `altname`). Must be a valid staking asset (e.g. `XBT.M`, `XTZ.S`, `ADA.S`)",
                    "example": "XBT.M"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Amount of the asset to stake"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Unstaking successful.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "object",
                      "properties": {
                        "refid": {
                          "type": "string",
                          "description": "Reference ID",
                          "example": "BOG5AE5-KSCNR4-VPNPEV"
                        }
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "refid": "BOG5AE5-KSCNR4-VPNPEV"
                  }
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)\n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/Unstake', {\n    \"nonce\": str(int(1000*time.time())),\n    \"asset\": \"XXBT\",\n    \"amount\": 0.1\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/Staking/Assets": {
      "post": {
        "deprecated": true,
        "summary": "List of Stakeable Assets",
        "description": "Deprecated: Please use the `Earn` endpoints instead.\n\nReturns the list of assets that the user is able to stake.\n",
        "tags": [
          "Staking"
        ],
        "operationId": "getStakingAssetInfo",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of stakeable assets retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/asset"
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "result": [
                    {
                      "method": "polkadot-staked",
                      "asset": "DOT",
                      "staking_asset": "DOT.S",
                      "rewards": {
                        "reward": "12.00",
                        "type": "percentage"
                      },
                      "on_chain": true,
                      "can_stake": true,
                      "can_unstake": true,
                      "minimum_amount": {
                        "staking": "0.0000000000",
                        "unstaking": "0.0000000000"
                      }
                    },
                    {
                      "method": "kusama-staked",
                      "asset": "KSM",
                      "staking_asset": "KSM.S",
                      "rewards": {
                        "reward": "12.00",
                        "type": "percentage"
                      },
                      "on_chain": true,
                      "can_stake": true,
                      "can_unstake": true,
                      "minimum_amount": {
                        "staking": "0.0000000000",
                        "unstaking": "0.0000000000"
                      }
                    }
                  ],
                  "error": []
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)\n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/Staking/Assets', {\n    \"nonce\": str(int(1000*time.time()))\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/Staking/Pending": {
      "post": {
        "deprecated": true,
        "summary": "Get Pending Staking Transactions",
        "description": "Deprecated: Please use the `Earn` endpoints instead.\n\nReturns the list of pending staking transactions. Once resolved, these transactions\nwill appear on the `List of Staking Transactions` endpoint.\n\n**API Key Permissions Required:** `Funds permissions - Query`\n",
        "tags": [
          "Staking"
        ],
        "operationId": "getStakingPendingDeposits",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Pending transactions retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transaction"
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "result": [
                    {
                      "method": "ada-staked",
                      "aclass": "currency",
                      "asset": "ADA.S",
                      "refid": "RUSB7W6-ESIXUX-K6PVTM",
                      "amount": "0.34844300",
                      "fee": "0.00000000",
                      "time": 1688967367,
                      "status": "Initial",
                      "type": "bonding"
                    },
                    {
                      "method": "xtz-staked",
                      "aclass": "currency",
                      "asset": "XTZ.S",
                      "refid": "RUCXX7O-6MWQBO-CQPGAX",
                      "amount": "0.00746900",
                      "fee": "0.00000000",
                      "time": 1688074402,
                      "status": "Initial",
                      "type": "bonding"
                    }
                  ],
                  "error": []
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)\n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/Staking/Pending', {\n    \"nonce\": str(int(1000*time.time()))\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/Staking/Transactions": {
      "post": {
        "deprecated": true,
        "summary": "List of Staking Transactions",
        "description": "Deprecated: Please use the `Earn` endpoints instead.\n\nReturns the list of 1000 recent staking transactions from past 90 days.\n\n**API Key Permissions Required:** `Funds permissions - Query`\n",
        "tags": [
          "Staking"
        ],
        "operationId": "getStakingTransactions",
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "nonce"
                ],
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of transactions retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/transaction"
                      }
                    },
                    "error": {
                      "$ref": "#/components/schemas/error"
                    }
                  }
                },
                "example": {
                  "result": [
                    {
                      "method": "xbt-staked",
                      "aclass": "currency",
                      "asset": "XBT.M",
                      "refid": "RWBL2YD-SJYHBZ-VBB3RD",
                      "amount": "0.0038634900",
                      "fee": "0.0000000000",
                      "time": 1688971496,
                      "status": "Success",
                      "type": "bonding",
                      "bond_start": 1688971496,
                      "bond_end": 1688971496
                    },
                    {
                      "method": "ada-staked",
                      "aclass": "currency",
                      "asset": "ADA.S",
                      "refid": "RUSB7W6-ESIXUX-K6PVTM",
                      "amount": "0.34844300",
                      "fee": "0.00000000",
                      "time": 1688967367,
                      "status": "Success",
                      "type": "bonding",
                      "bond_start": 16288967367,
                      "bond_end": 1688967367
                    },
                    {
                      "method": "eth2-staked",
                      "aclass": "currency",
                      "asset": "ETH2",
                      "refid": "RUOCJP3-TWUJOE-L4EEG3",
                      "amount": "0.0001943480",
                      "fee": "0.0000000000",
                      "time": 1688943004,
                      "status": "Success",
                      "type": "bonding",
                      "bond_start": 1688943004,
                      "bond_end": 1688943004
                    }
                  ],
                  "error": []
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Python",
            "source": "import time\nimport os\nimport requests\n\n# Read Kraken API key and secret stored in environment variables\napi_url = \"https://api.kraken.com\"\napi_key = os.environ['API_KEY_KRAKEN']\napi_sec = os.environ['API_SEC_KRAKEN']\n\n# Attaches auth headers and returns results of a POST request\ndef kraken_request(uri_path, data, api_key, api_sec):\n    headers = {}\n    headers['API-Key'] = api_key\n    # get_kraken_signature() as defined in the 'Authentication' section\n    headers['API-Sign'] = get_kraken_signature(uri_path, data, api_sec)\n    req = requests.post((api_url + uri_path), headers=headers, data=data)\n    return req\n\n# Construct the request and print the result\nresp = kraken_request('/0/private/Staking/Transactions', {\n    \"nonce\": str(int(1000*time.time()))\n}, api_key, api_sec)\n\nprint(resp.json())\n"
          }
        ]
      }
    },
    "/private/Earn/Allocate": {
      "post": {
        "tags": [
          "Earn"
        ],
        "summary": "Allocate Earn Funds",
        "description": "Allocate funds to the Strategy.\n\nRequires the `Earn Funds` API key permission.\nThe amount must always be defined.\n\nThis method is asynchronous. A couple of preflight checks are\nperformed synchronously on behalf of the method before it is dispatched\nfurther. The client is required to poll\nthe result using the `/0/private/Earn/AllocateStatus` endpoint.\n\nThere can be only one (de)allocation request in progress for given user and\nstrategy at any time. While the operation is in progress:\n\n1. `pending` attribute in `/Earn/Allocations` response for the strategy\n  indicates that funds are being allocated,\n2. `pending` attribute in `/Earn/AllocateStatus` response will be true.\n\nFollowing specific errors within `Earnings` class can be returned by this\nmethod:\n- Minimum allocation: `EEarnings:Below min:(De)allocation operation amount less than minimum`\n- Allocation in progress: `EEarnings:Busy:Another (de)allocation for the same strategy is in progress`\n- Service temporarily unavailable: `EEarnings:Busy`. Try again in a few minutes.\n- User tier verification: `EEarnings:Permission denied:The user's tier is not high enough`\n- Strategy not found: `EGeneral:Invalid arguments:Invalid strategy ID`",
        "operationId": "allocateStrategy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Allocation amount in asset specified in the strategy",
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "amount": {
                    "description": "The amount to allocate.",
                    "type": "string"
                  },
                  "strategy_id": {
                    "description": "A unique identifier of the chosen earn strategy, as returned from `/0/private/Earn/Strategies`.",
                    "type": "string"
                  }
                },
                "required": [
                  "amount",
                  "nonce",
                  "strategy_id"
                ]
              },
              "example": {
                "amount": "4.3",
                "nonce": 30295839,
                "strategy_id": "ESRFUO3-Q62XD-WIOIL7"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/error"
                    },
                    "result": {
                      "description": "Will return `true` when the operation is successful, null when an error occurred.",
                      "nullable": true,
                      "type": "boolean"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": true
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Key": [
              "API-Key"
            ]
          }
        ]
      }
    },
    "/private/Earn/Deallocate": {
      "post": {
        "tags": [
          "Earn"
        ],
        "summary": "Deallocate Earn Funds",
        "description": "Deallocate funds from a strategy.\n\nRequires the `Earn Funds` API key permission.\nThe amount must always be defined.\n\nThis method is asynchronous. A couple of preflight checks are\nperformed synchronously on behalf of the method before it is dispatched\nfurther. If the method returns HTTP 202 code, the client is required to poll\nthe result using the `/Earn/DeallocateStatus` endpoint.\n\nThere can be only one (de)allocation request in progress for given user and\nstrategy.  While the operation is in progress:\n\n1. `pending` attribute in `Allocations` response for the strategy will hold\n   the amount that is being deallocated (negative amount)\n2. `pending` attribute in `DeallocateStatus` response will be true.\n\nFollowing specific errors within `Earnings` class can be returned by this\nmethod:\n- Minimum allocation: `EEarnings:Below min:(De)allocation operation amount less than minimum`\n  allowed\n- Allocation in progress: `EEarnings:Busy:Another (de)allocation for the same strategy is in progress`\n- Strategy not found: `EGeneral:Invalid arguments:Invalid strategy ID`",
        "operationId": "deallocateStrategy",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Allocation amount in asset specified in the strategy",
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "amount": {
                    "description": "The amount to deallocate. This field is required.",
                    "type": "string"
                  },
                  "strategy_id": {
                    "description": "A unique identifier per earn strategy.",
                    "type": "string"
                  }
                },
                "required": [
                  "amount",
                  "nonce",
                  "strategy_id"
                ]
              },
              "example": {
                "amount": "4.3",
                "nonce": 30295839,
                "strategy_id": "ESRFUO3-Q62XD-WIOIL7"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/error"
                    },
                    "result": {
                      "description": "Will return `true` when the operation is successful, null when an error occurred.",
                      "nullable": true,
                      "type": "boolean"
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": true
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Key": [
              "API-Key"
            ]
          }
        ]
      }
    },
    "/private/Earn/AllocateStatus": {
      "post": {
        "tags": [
          "Earn"
        ],
        "summary": "Get Allocation Status",
        "description": "Get the status of the last allocation request.\n\nRequires either the `Earn Funds` or `Query Funds` API key permission.\n\n(De)allocation operations are asynchronous and this endpoint allows client\nto retrieve the status of the last dispatched operation. There can be only\none (de)allocation request in progress for given user and strategy.\n\nThe `pending` attribute in the response indicates if the previously\ndispatched operation is still in progress (true) or has successfully\ncompleted (false).  If the dispatched request failed with an error, then\nHTTP error is returned to the client as if it belonged to the original\nrequest.\n\nFollowing specific errors within `Earnings` class can be returned by this\nmethod:\n- Insufficient funds: `EEarnings:Insufficient funds:Insufficient funds to complete the (de)allocation request`\n- User cap exceeded: `EEarnings:Above max:The allocation exceeds user limit for the strategy`\n- Total cap exceeded: `EEarnings:Above max:The allocation exceeds the total strategy limit`\n- Minimum allocation: `EEarnings:Below min:(De)allocation operation amount less than minimum`",
        "operationId": "getAllocateStrategyStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "strategy_id": {
                    "description": "ID of the earn strategy, call `Earn/Strategies` to list availble strategies",
                    "type": "string"
                  }
                },
                "required": [
                  "nonce",
                  "strategy_id"
                ]
              },
              "example": {
                "nonce": 30295839,
                "strategy_id": "ESRFUO3-Q62XD-WIOIL7"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/error"
                    },
                    "result": {
                      "nullable": true,
                      "description": "Status of async earn operation",
                      "type": "object",
                      "properties": {
                        "pending": {
                          "description": "`true` if an operation is still in progress on the same strategy.",
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "pending": false
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Key": [
              "API-Key"
            ]
          }
        ]
      }
    },
    "/private/Earn/DeallocateStatus": {
      "post": {
        "tags": [
          "Earn"
        ],
        "summary": "Get Deallocation Status",
        "description": "Get the status of the last deallocation request.\n\nRequires either the `Earn Funds` or `Query Funds` API key permission.\n\n(De)allocation operations are asynchronous and this endpoint allows client\nto retrieve the status of the last dispatched operation. There can be only\none (de)allocation request in progress for given user and strategy.\n\nThe `pending` attribute in the response indicates if the previously\ndispatched operation is still in progress (true) or has successfully\ncompleted (false).  If the dispatched request failed with an error, then\nHTTP error is returned to the client as if it belonged to the original\nrequest.\n\nFollowing specific errors within `Earnings` class can be returned by this\nmethod:\n- Insufficient funds: `EEarnings:Insufficient funds:Insufficient funds to complete the (de)allocation request`\n- Minimum allocation: `EEarnings:Below min:(De)allocation operation amount less than minimum`",
        "operationId": "getDeallocateStrategyStatus",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "strategy_id": {
                    "description": "ID of the earn strategy, call `Earn/Strategies` to list availble strategies",
                    "type": "string"
                  }
                },
                "required": [
                  "nonce",
                  "strategy_id"
                ]
              },
              "example": {
                "nonce": 30295839,
                "strategy_id": "ESRFUO3-Q62XD-WIOIL7"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/error"
                    },
                    "result": {
                      "nullable": true,
                      "description": "Status of async earn operation",
                      "type": "object",
                      "properties": {
                        "pending": {
                          "description": "`true` if an operation is still in progress on the same strategy.",
                          "type": "boolean"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "pending": false
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Key": [
              "API-Key"
            ]
          }
        ]
      }
    },
    "/private/Earn/Strategies": {
      "post": {
        "tags": [
          "Earn"
        ],
        "summary": "List Earn Strategies",
        "description": "List earn strategies along with their parameters.\n\nRequires a valid API key but not specific permission is required.\n\nReturns only strategies that are available to the user\nbased on geographic region.\n\nWhen the user does not meet the tier restriction, `can_allocate` will be\nfalse and `allocation_restriction_info` indicates `Tier` as the restriction\nreason. Earn products generally require Intermediate tier. Get your account verified\nto access earn.\n\nPaging isn't yet implemented, so it the endpoint always returns all\ndata in the first page.",
        "operationId": "listStrategies",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "List strategies parameters",
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "ascending": {
                    "nullable": true,
                    "description": "`true` to sort ascending, `false` (the default) for descending.",
                    "type": "boolean"
                  },
                  "asset": {
                    "nullable": true,
                    "description": "Filter strategies by asset name",
                    "type": "string"
                  },
                  "cursor": {
                    "nullable": true,
                    "description": "None to start at beginning/end, otherwise next page ID",
                    "type": "string"
                  },
                  "limit": {
                    "nullable": true,
                    "description": "How many items to return per page. Note that the limit may be cap'd to lower value in the application code.",
                    "type": "integer",
                    "format": "uint16"
                  },
                  "lock_type": {
                    "nullable": true,
                    "description": "Filter strategies by lock type",
                    "type": "array",
                    "items": {
                      "description": "Type of a strategy",
                      "type": "string",
                      "enum": [
                        "flex",
                        "bonded",
                        "timed",
                        "instant"
                      ]
                    }
                  }
                },
                "required": [
                  "nonce"
                ]
              },
              "example": {
                "nonce": 30295839,
                "asset": "DOT"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/error"
                    },
                    "result": {
                      "nullable": true,
                      "type": "object",
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "description": "Parameters for a single strategy",
                            "type": "object",
                            "properties": {
                              "allocation_fee": {
                                "description": "Fee applied when allocating to this strategy",
                                "oneOf": [
                                  {
                                    "type": "string",
                                    "title": "string"
                                  },
                                  {
                                    "type": "integer",
                                    "title": "integer"
                                  },
                                  {
                                    "type": "number",
                                    "title": "number"
                                  }
                                ]
                              },
                              "allocation_restriction_info": {
                                "description": "Reason list why user is not eligible for allocating to the strategy",
                                "type": "array",
                                "items": {
                                  "description": "Recoverable strategy restriction reasons, which are no preventing strategy from being returned by [`ListStrategiesResponse`].",
                                  "type": "string",
                                  "enum": [
                                    "tier"
                                  ]
                                }
                              },
                              "apr_estimate": {
                                "nullable": true,
                                "description": "The estimate is based on previous revenues from the strategy. Optional hint, not always present.",
                                "type": "object",
                                "properties": {
                                  "high": {
                                    "description": "Maximal yield percentage for one year",
                                    "type": "string"
                                  },
                                  "low": {
                                    "description": "Minimal yield percentage for one year",
                                    "type": "string"
                                  }
                                }
                              },
                              "asset": {
                                "description": "The asset to invest for this earn strategy",
                                "type": "string"
                              },
                              "auto_compound": {
                                "description": "Auto compound choices for the earn strategy",
                                "oneOf": [
                                  {
                                    "description": "Auto compound is not possible for any allocation",
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "disabled"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "description": "Auto compound is forced for all allocations",
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "enabled"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "description": "Auto compound depends on user's preference and it comes with default value",
                                    "type": "object",
                                    "properties": {
                                      "default": {
                                        "type": "boolean"
                                      },
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "optional"
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              "can_allocate": {
                                "description": "Is allocation available for this strategy",
                                "type": "boolean"
                              },
                              "can_deallocate": {
                                "description": "Is deallocation available for this strategy",
                                "type": "boolean"
                              },
                              "deallocation_fee": {
                                "description": "Fee applied when deallocating from this strategy",
                                "oneOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              },
                              "id": {
                                "description": "The unique identifier for this strategy",
                                "type": "string"
                              },
                              "lock_type": {
                                "description": "Type of the strategy",
                                "oneOf": [
                                  {
                                    "description": "Either the whole asset balance or part of it is allocated to earn strategy and users are free to deallocate it anytime and most importantly the deallocation can be implicit (triggered by a trade, withdrawal from exchange, etc.).",
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "flex"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "description": "Explicit allocate and deallocate action by user is required and bonding/unbonding parameters apply.",
                                    "type": "object",
                                    "properties": {
                                      "bonding_period": {
                                        "description": "Duration of the bonding period, in seconds",
                                        "type": "integer"
                                      },
                                      "bonding_period_variable": {
                                        "description": "Is the bonding period length variable (`true`) or static (`false`)",
                                        "type": "boolean"
                                      },
                                      "bonding_rewards": {
                                        "description": "Whether rewards are earned during the bonding period (payouts occur after bonding is complete)",
                                        "type": "boolean"
                                      },
                                      "exit_queue_period": {
                                        "description": "In order to remove funds, if this value is greater than 0, funds will first have to enter an exit queue and will have to wait for the exit queue period to end. Once ended, her funds will then follow and respect the `unbonding_period`.\n\nIf the value of the exit queue period is 0, then no waiting will have to occur and the exit queue will be skipped\n\nRewards are always paid out for the exit queue",
                                        "type": "integer"
                                      },
                                      "payout_frequency": {
                                        "description": "At what intervals are rewards distributed and credited to the user’s ledger, in seconds",
                                        "type": "integer"
                                      },
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "bonded"
                                        ]
                                      },
                                      "unbonding_period": {
                                        "description": "Duration of the unbonding period in seconds. In order to remove funds, you must wait for the unbonding period to pass after requesting removal before funds become available in her spot wallet",
                                        "type": "integer"
                                      },
                                      "unbonding_period_variable": {
                                        "description": "Is the unbonding period length variable (`true`) or static (`false`)",
                                        "type": "boolean"
                                      },
                                      "unbonding_rewards": {
                                        "description": "Whether rewards are earned and payouts are done during the unbonding period",
                                        "type": "boolean"
                                      }
                                    }
                                  },
                                  {
                                    "description": "Instant strategy lock type is a special case of bonded strategy with no bonding/unbonding period. It is equivalent of what used to be called \"flex\" in legacy staking system (not to be confused with Flex defined above). Explicit allocate/deallocate action is required.",
                                    "type": "object",
                                    "properties": {
                                      "payout_frequency": {
                                        "description": "At what intervals are rewards distributed and credited to the user’s ledger, in seconds",
                                        "type": "integer"
                                      },
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "instant"
                                        ]
                                      }
                                    }
                                  }
                                ]
                              },
                              "user_cap": {
                                "nullable": true,
                                "type": "string",
                                "description": "The maximum amount of funds that any given user may allocate to an account. Absence of value means there is no limit. Zero means that all new allocations will return an error (though auto-compound is unaffected)."
                              },
                              "user_min_allocation": {
                                "nullable": true,
                                "type": "string",
                                "description": "Minimum amount (in USD) for an allocation or deallocation. Absence means no minimum."
                              },
                              "yield_source": {
                                "description": "Yield generation mechanism of this strategy",
                                "oneOf": [
                                  {
                                    "description": "Funds are staked on-chain, PoS is the source of yield.",
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "staking"
                                        ]
                                      }
                                    }
                                  },
                                  {
                                    "description": "Funds are put at work in another yield-generation financial mechanism.",
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "enum": [
                                          "off_chain"
                                        ]
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "next_cursor": {
                          "nullable": true,
                          "description": "index to send into PageRequest for next page, None means you've reached the end.",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "next_cursor": "2",
                    "items": [
                      {
                        "id": "ESRFUO3-Q62XD-WIOIL7",
                        "asset": "DOT",
                        "lock_type": {
                          "type": "instant",
                          "payout_frequency": 604800
                        },
                        "apr_estimate": {
                          "low": "8.0000",
                          "high": "12.0000"
                        },
                        "user_min_allocation": "0.01",
                        "allocation_fee": "0.0000",
                        "deallocation_fee": "0.0000",
                        "auto_compound": {
                          "type": "enabled"
                        },
                        "yield_source": {
                          "type": "staking"
                        },
                        "can_allocate": true,
                        "can_deallocate": true,
                        "allocation_restriction_info": []
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Key": [
              "API-Key"
            ]
          }
        ]
      }
    },
    "/private/Earn/Allocations": {
      "post": {
        "tags": [
          "Earn"
        ],
        "summary": "List Earn Allocations",
        "description": "List all allocations for the user.\n\nRequires the `Query Funds` API key permission.\n\nBy default all allocations are returned, even for strategies that have been\nused in the past and have zero balance now. That is so that the user can see\nhow much was earned with given strategy in the past.\n`hide_zero_allocations` parameter can be used to remove zero balance entries\nfrom the output.  Paging hasn't been implemented for this method as we don't\nexpect the result for a particular user to be overwhelmingly large.\n\nAll amounts in the output can be denominated in a currency of user's choice\n(the `converted_asset` parameter).\n\nInformation about when the next reward will be paid to the client is also\nprovided in the output.\n\nAllocated funds can be in up to 4 states:\n- bonding\n- allocated\n- exit_queue (ETH only)\n- unbonding\n\nAny funds in `total` not in `bonding`/`unbonding` are simply allocated and\nearning rewards. Depending on the strategy funds in the other 3 states can\nalso be earning rewards. Consult the output of `/Earn/Strategies` to know\nwhether `bonding`/`unbonding` earn rewards. `ETH` in `exit_queue` still\nearns rewards.\n\nNote that for `ETH`, when the funds are in the `exit_queue` state, the\n`expires` time given is the time when the funds will have finished\nunbonding, not when they go from exit queue to unbonding.\n\n(Un)bonding time estimate can be inaccurate right after having (de)allocated the\nfunds. Wait 1-2 minutes after (de)allocating to get an accurate result.",
        "operationId": "listAllocations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Page request",
                "type": "object",
                "properties": {
                  "nonce": {
                    "$ref": "#/components/schemas/nonce"
                  },
                  "ascending": {
                    "nullable": true,
                    "description": "`true` to sort ascending, `false` (the default) for descending.",
                    "type": "boolean"
                  },
                  "converted_asset": {
                    "nullable": true,
                    "description": "A secondary currency to express the value of your allocations (the default is USD).",
                    "type": "string"
                  },
                  "hide_zero_allocations": {
                    "nullable": true,
                    "description": "Omit entries for strategies that were used in the past but now they don't hold any allocation (the default is `false`)",
                    "type": "boolean"
                  }
                },
                "required": [
                  "nonce"
                ]
              },
              "example": {
                "nonce": 30295839,
                "converted_asset": "EUR",
                "hide_zero_allocations": true
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "$ref": "#/components/schemas/error"
                    },
                    "result": {
                      "nullable": true,
                      "description": "Page response",
                      "type": "object",
                      "properties": {
                        "converted_asset": {
                          "description": "A secondary asset to show the value of allocations. (Eg. you also want to\nsee the value of your allocations in USD). Choose this in the request\nparameters.",
                          "type": "string"
                        },
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "amount_allocated": {
                                "description": "Amounts allocated to this Earn strategy",
                                "type": "object",
                                "properties": {
                                  "bonding": {
                                    "nullable": true,
                                    "description": "Amount allocated in bonding status. Only present when there are bonding allocations.",
                                    "type": "object",
                                    "properties": {
                                      "allocation_count": {
                                        "description": "The total number of allocations in this state for this asset",
                                        "type": "integer",
                                        "format": "uint"
                                      },
                                      "allocations": {
                                        "description": "Details about when each allocation will expire and move to the next state",
                                        "type": "array",
                                        "items": {
                                          "description": "Additional information about the allocation describing the amount contained within the allocation and when it will transition to the next state",
                                          "type": "object",
                                          "properties": {
                                            "converted": {
                                              "description": "Amount converted into the requested asset",
                                              "type": "string"
                                            },
                                            "created_at": {
                                              "description": "The date and time which a request to either allocate was received and\nthe funds started bonding.",
                                              "type": "string",
                                              "format": "date-time"
                                            },
                                            "expires": {
                                              "description": "The date at which the `Bonded` allocation will move to the `Earning` state.",
                                              "type": "string",
                                              "format": "date-time"
                                            },
                                            "native": {
                                              "description": "Amount in the native asset",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "converted": {
                                        "description": "Amount converted into the requested asset",
                                        "type": "string"
                                      },
                                      "native": {
                                        "description": "Amount in the native asset",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "exit_queue": {
                                    "nullable": true,
                                    "description": "Amount allocated in the exit-queue status. Only present when there are exit_queue allocations.",
                                    "type": "object",
                                    "properties": {
                                      "allocation_count": {
                                        "description": "The total number of allocations in this state for this asset",
                                        "type": "integer",
                                        "format": "uint"
                                      },
                                      "allocations": {
                                        "description": "Details about when each allocation will expire and move to the next state",
                                        "type": "array",
                                        "items": {
                                          "description": "Additional information about the allocation describing the amount contained within the allocation and when it will transition to the next state",
                                          "type": "object",
                                          "properties": {
                                            "converted": {
                                              "description": "Amount converted into the requested asset",
                                              "type": "string"
                                            },
                                            "created_at": {
                                              "description": "The date and time which a request to deallocate was received and processed.\nFor a deallocation request to a strategy with an `exit-queue`, this will be the time the funds joined the exit queue.",
                                              "type": "string",
                                              "format": "date-time"
                                            },
                                            "expires": {
                                              "description": "The date/time when the funds will be unbonded.",
                                              "type": "string",
                                              "format": "date-time"
                                            },
                                            "native": {
                                              "description": "Amount in the native asset",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "converted": {
                                        "description": "Amount converted into the requested asset",
                                        "type": "string"
                                      },
                                      "native": {
                                        "description": "Amount in the native asset",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "pending": {
                                    "nullable": true,
                                    "description": "Pending allocation amount - can be negative if the pending operation is deallocation. Only present when there are pending allocations.",
                                    "type": "object",
                                    "properties": {
                                      "converted": {
                                        "description": "Amount converted into the requested asset",
                                        "type": "string"
                                      },
                                      "native": {
                                        "description": "Amount in the native asset",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "total": {
                                    "description": "Total amount allocated to this Earn strategy",
                                    "type": "object",
                                    "properties": {
                                      "converted": {
                                        "description": "Amount converted into the requested asset",
                                        "type": "string"
                                      },
                                      "native": {
                                        "description": "Amount in the native asset",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "unbonding": {
                                    "nullable": true,
                                    "description": "Amount allocated in unbonding status. Only present when there are unbonding allocations.",
                                    "type": "object",
                                    "properties": {
                                      "allocation_count": {
                                        "description": "The total number of allocations in this state for this asset",
                                        "type": "integer",
                                        "format": "uint"
                                      },
                                      "allocations": {
                                        "description": "Details about when each allocation will expire and move to the next state",
                                        "type": "array",
                                        "items": {
                                          "description": "Additional information about the allocation describing the amount contained within the allocation and when it will transition to the next state",
                                          "type": "object",
                                          "properties": {
                                            "converted": {
                                              "description": "Amount converted into the requested asset",
                                              "type": "string"
                                            },
                                            "created_at": {
                                              "description": "The date and time which a request to either allocate or deallocate was received and processed.\n\nFor a deallocation request to a strategy with an `exit-queue`, this will be the time the funds joined the exit queue. For a deallocation request to a strategy without exit queue, this will be the time the funds started unbonding",
                                              "type": "string",
                                              "format": "date-time"
                                            },
                                            "expires": {
                                              "description": "The date/time the funds will be unbonded.",
                                              "type": "string",
                                              "format": "date-time"
                                            },
                                            "native": {
                                              "description": "Amount in the native asset",
                                              "type": "string"
                                            }
                                          }
                                        }
                                      },
                                      "converted": {
                                        "description": "Amount converted into the requested asset",
                                        "type": "string"
                                      },
                                      "native": {
                                        "description": "Amount in the native asset",
                                        "type": "string"
                                      }
                                    }
                                  }
                                }
                              },
                              "native_asset": {
                                "description": "The asset of the native currency of this allocation",
                                "type": "string"
                              },
                              "payout": {
                                "nullable": true,
                                "description": "Information about the current payout period, absent if when there is no current payout period.",
                                "type": "object",
                                "properties": {
                                  "accumulated_reward": {
                                    "description": "Reward accumulated in the payout period until now",
                                    "type": "object",
                                    "properties": {
                                      "converted": {
                                        "description": "Amount converted into the requested asset",
                                        "type": "string"
                                      },
                                      "native": {
                                        "description": "Amount in the native asset",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "estimated_reward": {
                                    "description": "Estimated reward from now until the payout",
                                    "type": "object",
                                    "properties": {
                                      "converted": {
                                        "description": "Amount converted into the requested asset",
                                        "type": "string"
                                      },
                                      "native": {
                                        "description": "Amount in the native asset",
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "period_end": {
                                    "description": "Tentative date of the next reward payout.",
                                    "type": "string",
                                    "format": "date-time"
                                  },
                                  "period_start": {
                                    "description": "When the current payout period started. Either the date of the last payout or when it was enabled.",
                                    "type": "string",
                                    "format": "date-time"
                                  }
                                }
                              },
                              "strategy_id": {
                                "description": "Unique ID for Earn Strategy",
                                "type": "string"
                              },
                              "total_rewarded": {
                                "description": "Amount earned using the strategy during the whole lifetime of user account",
                                "type": "object",
                                "properties": {
                                  "converted": {
                                    "description": "Amount converted into the requested asset",
                                    "type": "string"
                                  },
                                  "native": {
                                    "description": "Amount in the native asset",
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          }
                        },
                        "total_allocated": {
                          "description": "The total amount allocated across all strategies, denominated in the `converted_asset` currency",
                          "type": "string"
                        },
                        "total_rewarded": {
                          "description": "Amount earned across all strategies during the whole lifetime of user account, denominated in `converted_asset` currency",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "example": {
                  "error": [],
                  "result": {
                    "converted_asset": "USD",
                    "total_allocated": "49.2398",
                    "total_rewarded": "0.0675",
                    "next_cursor": "2",
                    "items": [
                      {
                        "strategy_id": "ESDQCOL-WTZEU-NU55QF",
                        "native_asset": "ETH",
                        "amount_allocated": {
                          "bonding": {
                            "native": "0.0210000000",
                            "converted": "39.0645",
                            "allocation_count": 2,
                            "allocations": [
                              {
                                "created_at": "2023-07-06T10:52:05Z",
                                "expires": "2023-08-19T02:34:05.807Z",
                                "native": "0.0010000000",
                                "converted": "1.8602"
                              },
                              {
                                "created_at": "2023-08-01T11:25:52Z",
                                "expires": "2023-09-06T07:55:52.648Z",
                                "native": "0.0200000000",
                                "converted": "37.2043"
                              }
                            ]
                          },
                          "total": {
                            "native": "0.0210000000",
                            "converted": "39.0645"
                          }
                        },
                        "total_rewarded": {
                          "native": "0",
                          "converted": "0.0000"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "API-Key": [
              "API-Key"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "API-Key": {
        "type": "apiKey",
        "description": "The \"API-Key\" header should contain your API key.",
        "name": "API-Key",
        "in": "header"
      },
      "API-Sign": {
        "type": "apiKey",
        "description": "Authenticated requests should be signed with the \"API-Sign\" header, using a signature generated with your private key, nonce, encoded payload, and URI path according to:\n```none\nHMAC-SHA512 of (URI path + SHA256(nonce + POST data)) and base64 decoded secret API key\n```\n\n### Example Signature\n\nThe following is a specific example of a signature generated with a particular private key, nonce, and payload corresponding to a new limit order (buy 1.25 XBTUSD at $37,500). If your code is generating a different signature (\"API-Sign\") for this example, then there is likely an issue with your application of the above methodology. Code snippets for generating the signature in Python, Golang and Node.js follow below.\n\n| Field | Value |\n|-|-|\n| Private Key | kQH5HW/8p1uGOVjbgWA7FunAmGO8lsSUXNsu3eow76sz84Q18fWxnyRzBHCd3pd5nE9qa99HAZtuZuj6F1huXg== |\n| Nonce |  1616492376594 |\n| Encoded Payload | nonce=1616492376594&ordertype=limit&pair=XBTUSD&price=37500&type=buy&volume=1.25 | \n| URI Path |  /0/private/AddOrder | \n| __API-Sign__ | __4/dpxb3iT4tp/ZCVEwSnEsLxx0bqyhLpdfOpc6fn7OR8+UClSV5n9E6aSS8MPtnRfp32bAb0nmbRn6H8ndwLUQ==__ | \n\n### Code Examples\n\n#### Python\n```python\nimport urllib.parse\nimport hashlib\nimport hmac\nimport base64\n\ndef get_kraken_signature(urlpath, data, secret):\n\n    postdata = urllib.parse.urlencode(data)\n    encoded = (str(data['nonce']) + postdata).encode()\n    message = urlpath.encode() + hashlib.sha256(encoded).digest()\n\n    mac = hmac.new(base64.b64decode(secret), message, hashlib.sha512)\n    sigdigest = base64.b64encode(mac.digest())\n    return sigdigest.decode()\n\napi_sec = \"kQH5HW/8p1uGOVjbgWA7FunAmGO8lsSUXNsu3eow76sz84Q18fWxnyRzBHCd3pd5nE9qa99HAZtuZuj6F1huXg==\"\n\ndata = {\n    \"nonce\": \"1616492376594\", \n    \"ordertype\": \"limit\", \n    \"pair\": \"XBTUSD\",\n    \"price\": 37500, \n    \"type\": \"buy\",\n    \"volume\": 1.25\n}\n\nsignature = get_kraken_signature(\"/0/private/AddOrder\", data, api_sec)\nprint(\"API-Sign: {}\".format(signature))\n\n```\n#### Golang [link](https://play.golang.org/p/SqP2pajUH6K)\n```go\npackage main\n\nimport (\n  \"crypto/hmac\"\n  \"crypto/sha256\"\n  \"crypto/sha512\"\n  \"encoding/base64\"\n  \"net/url\"\n  \"fmt\"\n)\n\nfunc getKrakenSignature(url_path string, values url.Values, secret []byte) string {\n  \n  sha := sha256.New()\n  sha.Write([]byte(values.Get(\"nonce\") + values.Encode()))\n  shasum := sha.Sum(nil)\n\n  mac := hmac.New(sha512.New, secret)\n  mac.Write(append([]byte(url_path), shasum...))\n  macsum := mac.Sum(nil)\n  return base64.StdEncoding.EncodeToString(macsum)\n}\n\nfunc main() {\n\n  apiSecret := \"kQH5HW/8p1uGOVjbgWA7FunAmGO8lsSUXNsu3eow76sz84Q18fWxnyRzBHCd3pd5nE9qa99HAZtuZuj6F1huXg==\"\n\n  payload := url.Values{}\n  payload.Add(\"pair\",\"XBTUSD\")\n  payload.Add(\"type\",\"buy\")\n  payload.Add(\"ordertype\",\"limit\")\n  payload.Add(\"price\",\"37500\")\n  payload.Add(\"volume\",\"1.25\")\n  payload.Add(\"nonce\",\"1616492376594\")\n\n  b64DecodedSecret, _ := base64.StdEncoding.DecodeString(apiSecret)\n\n  signature := getKrakenSignature(\"/0/private/AddOrder\", payload, b64DecodedSecret)\n  fmt.Printf(\"API-Sign: \" + signature +\"\\n\")\n}\n```\n\n#### Node JS\n```js\nconst crypto = require('crypto');\nconst qs     = require('qs');\n\nconst getMessageSignature = (path, request, secret, nonce) => {\n    const message       = qs.stringify(request);\n    const secret_buffer = new Buffer(secret, 'base64');\n    const hash          = new crypto.createHash('sha256');\n    const hmac          = new crypto.createHmac('sha512', secret_buffer);\n    const hash_digest   = hash.update(nonce + message).digest('binary');\n    const hmac_digest   = hmac.update(path + hash_digest, 'binary').digest('base64');\n\n    return hmac_digest;\n};\n```\n",
        "name": "API-Sign",
        "in": "header"
      }
    },
    "schemas": {
      "error": {
        "type": "array",
        "items": {
          "description": "Kraken API error",
          "type": "string",
          "example": "EGeneral:Invalid arguments"
        }
      },
      "time": {
        "description": "Success response",
        "type": "object",
        "properties": {
          "result": {
            "title": "ServerTime",
            "type": "object",
            "properties": {
              "unixtime": {
                "description": "Unix timestamp",
                "type": "integer"
              },
              "rfc1123": {
                "description": "RFC 1123 time format",
                "type": "string"
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "info": {
        "title": "AssetInfo",
        "description": "Asset Info",
        "type": "object",
        "properties": {
          "aclass": {
            "description": "Asset Class",
            "type": "string"
          },
          "altname": {
            "description": "Alternate name",
            "type": "string"
          },
          "decimals": {
            "description": "Scaling decimal places for record keeping",
            "type": "integer"
          },
          "display_decimals": {
            "description": "Scaling decimal places for output display",
            "type": "integer"
          },
          "collateral_value": {
            "description": "Valuation as margin collateral (if applicable)",
            "type": "number"
          },
          "status": {
            "description": "Status of asset. Possible values: `enabled`, `deposit_only`, `withdrawal_only`, `funding_temporarily_disabled`.",
            "type": "string"
          }
        }
      },
      "info-2": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "asset",
              "$ref": "#/components/schemas/info"
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "pairs": {
        "title": "AssetPair",
        "description": "Trading Asset Pair",
        "type": "object",
        "x-additionalPropertiesName": "pair",
        "properties": {
          "altname": {
            "description": "Alternate pair name",
            "type": "string"
          },
          "wsname": {
            "description": "WebSocket pair name (if available)",
            "type": "string"
          },
          "aclass_base": {
            "description": "Asset class of base component",
            "type": "string"
          },
          "base": {
            "description": "Asset ID of base component",
            "type": "string"
          },
          "aclass_quote": {
            "description": "Asset class of quote component",
            "type": "string"
          },
          "quote": {
            "description": "Asset ID of quote component",
            "type": "string"
          },
          "lot": {
            "description": "Volume lot size",
            "type": "string",
            "deprecated": true
          },
          "pair_decimals": {
            "description": "Scaling decimal places for pair",
            "type": "integer"
          },
          "cost_decimals": {
            "description": "Scaling decimal places for cost",
            "type": "integer"
          },
          "lot_decimals": {
            "description": "Scaling decimal places for volume",
            "type": "integer"
          },
          "lot_multiplier": {
            "description": "Amount to multiply lot volume by to get currency volume",
            "type": "integer"
          },
          "leverage_buy": {
            "description": "Array of leverage amounts available when buying",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "leverage_sell": {
            "description": "Array of leverage amounts available when selling",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "fees": {
            "description": "Fee schedule array in `[<volume>, <percent fee>]` tuples",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          "fees_maker": {
            "description": "Maker fee schedule array in `[<volume>, <percent fee>]`  tuples (if on maker/taker)",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          "fee_volume_currency": {
            "description": "Volume discount currency",
            "type": "string"
          },
          "margin_call": {
            "description": "Margin call level",
            "type": "integer"
          },
          "margin_stop": {
            "description": "Stop-out/liquidation margin level",
            "type": "integer"
          },
          "ordermin": {
            "description": "Minimum order size (in terms of base currency)",
            "type": "string"
          },
          "costmin": {
            "description": "Minimum order cost (in terms of quote currency)",
            "type": "string"
          },
          "tick_size": {
            "description": "Minimum increment between valid price levels",
            "type": "string"
          },
          "status": {
            "description": "Status of asset. Possible values: `online`, `cancel_only`, `post_only`, `limit_only`, `reduce_only`.",
            "type": "string"
          },
          "long_position_limit": {
            "description": "Maximum long margin position size (in terms of base currency)",
            "type": "integer"
          },
          "short_position_limit": {
            "description": "Maximum short margin position size (in terms of base currency)",
            "type": "integer"
          }
        }
      },
      "ticker": {
        "title": "AssetTickerInfo",
        "description": "Asset Ticker Info",
        "type": "object",
        "properties": {
          "a": {
            "description": "Ask `[<price>, <whole lot volume>, <lot volume>]`",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "b": {
            "description": "Bid `[<price>, <whole lot volume>, <lot volume>]`",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "c": {
            "description": "Last trade closed `[<price>, <lot volume>]`",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "v": {
            "description": "Volume `[<today>, <last 24 hours>]`",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "p": {
            "description": "Volume weighted average price `[<today>, <last 24 hours>]`",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "t": {
            "description": "Number of trades `[<today>, <last 24 hours>]`",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "l": {
            "description": "Low `[<today>, <last 24 hours>]`",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "h": {
            "description": "High `[<today>, <last 24 hours>]`",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "o": {
            "description": "Today's opening price",
            "type": "string"
          }
        }
      },
      "ticker-2": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "pair",
              "$ref": "#/components/schemas/ticker"
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "tickData": {
        "title": "TickData",
        "description": "Array of tick data arrays\n`[int <time>, string <open>, string <high>, string <low>, string <close>, string <vwap>, string <volume>, int <count>]`\n",
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "minItems": 8,
            "maxItems": 8,
            "oneOf": [
              {
                "type": "string",
                "title": "string"
              },
              {
                "type": "integer",
                "title": "integer"
              }
            ],
            "example": [
              1548115200,
              "3533.4",
              "3543.7",
              "3530.7",
              "3539.4",
              "3539.8",
              "83.09287787",
              232
            ]
          }
        }
      },
      "ohlc": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "pair",
              "$ref": "#/components/schemas/tickData"
            },
            "properties": {
              "last": {
                "type": "integer",
                "description": "ID to be used as since when polling for new, committed OHLC data"
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "orderBookEntry": {
        "title": "OrderBook",
        "description": "Asset Pair Order Book Entries",
        "type": "object",
        "properties": {
          "asks": {
            "description": "Ask side array of entries `[<price>, <volume>, <timestamp>]`",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "minItems": 3,
                "maxItems": 3,
                "oneOf": [
                  {
                    "type": "string",
                    "title": "string"
                  },
                  {
                    "type": "integer",
                    "title": "integer"
                  }
                ],
                "example": [
                  "3539.90000",
                  "0.801",
                  1548119951
                ]
              }
            }
          },
          "bids": {
            "description": "Bid side array of entries `[<price>, <volume>, <timestamp>]`",
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "minItems": 3,
                "maxItems": 3,
                "oneOf": [
                  {
                    "type": "string",
                    "title": "string"
                  },
                  {
                    "type": "integer",
                    "title": "integer"
                  }
                ],
                "example": [
                  "3538.70000",
                  "0.798",
                  1548119924
                ]
              }
            }
          }
        }
      },
      "depth": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "pair",
              "$ref": "#/components/schemas/orderBookEntry"
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "trade": {
        "title": "TickData",
        "description": "Array of trade entries\n`[<price>, <volume>, <time>, <buy/sell>, <market/limit>, <miscellaneous>, <trade_id>]`\n",
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "title": "string"
              },
              {
                "type": "number",
                "title": "number"
              }
            ],
            "example": [
              "1205.00000",
              "2.28253070",
              1668714225.5189962,
              "b",
              "l",
              "",
              41557503
            ]
          }
        }
      },
      "trades": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "pair",
              "$ref": "#/components/schemas/trade"
            },
            "properties": {
              "last": {
                "type": "string",
                "description": "ID to be used as since when polling for new trade data"
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "spread": {
        "title": "SpreadData",
        "description": "Array of spread entries\n`[int <time>, string <bid>, string <ask>]`\n",
        "type": "array",
        "items": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "title": "string"
              },
              {
                "type": "integer",
                "title": "integer"
              }
            ],
            "example": [
              1548120550,
              "3538.70000",
              "3541.50000"
            ]
          }
        }
      },
      "spread-2": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "pair",
              "$ref": "#/components/schemas/spread"
            },
            "properties": {
              "last": {
                "type": "integer",
                "description": "ID to be used as since when polling for new spread data"
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "nonce": {
        "description": "Nonce used in construction of `API-Sign` header",
        "type": "integer",
        "format": "int32"
      },
      "balance": {
        "title": "AccountBalance",
        "description": "Account Balance",
        "type": "object",
        "additionalProperties": {
          "x-additionalPropertiesName": "asset",
          "type": "string",
          "description": "balance"
        },
        "example": {
          "ZUSD": "2970172.7962"
        }
      },
      "balance-2": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/balance"
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "balanceex": {
        "title": "ExtendedBalance",
        "description": "Extended Balance",
        "type": "object",
        "properties": {
          "balance": {
            "description": "Total balance amount for an asset",
            "type": "string",
            "example": "3.46840030"
          },
          "credit": {
            "description": "Total credit amount (only applicable if account has a credit line)",
            "type": "string",
            "example": "1.26844502"
          },
          "credit_used": {
            "description": "Used credit amount (only applicable if account has a credit line)",
            "type": "string",
            "example": "0.10002300"
          },
          "hold_trade": {
            "description": "Total held amount for an asset",
            "type": "string",
            "example": "2.14560458"
          }
        }
      },
      "balanceex-2": {
        "type": "object",
        "properties": {
          "result": {
            "title": "ExtendedBalance",
            "description": "Extended Balance",
            "type": "object",
            "properties": {
              "asset": {
                "type": "object",
                "$ref": "#/components/schemas/balanceex"
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "balance-3": {
        "title": "AccountBalance",
        "description": "Account Balance",
        "type": "object",
        "properties": {
          "eb": {
            "description": "Equivalent balance (combined balance of all currencies)",
            "type": "string",
            "example": "3224744.0162"
          },
          "tb": {
            "description": "Trade balance (combined balance of all equity currencies)",
            "type": "string",
            "example": "3224744.0162"
          },
          "m": {
            "description": "Margin amount of open positions",
            "type": "string",
            "example": "0.0000"
          },
          "n": {
            "description": "Unrealized net profit/loss of open positions",
            "type": "string",
            "example": "0.0000"
          },
          "c": {
            "description": "Cost basis of open positions",
            "type": "string",
            "example": "0.0000"
          },
          "v": {
            "description": "Current floating valuation of open positions",
            "type": "string",
            "example": "0.0000"
          },
          "e": {
            "description": "Equity: `trade balance + unrealized net profit/loss`",
            "type": "string",
            "example": "3224744.0162"
          },
          "mf": {
            "description": "Free margin: `Equity - initial margin (maximum margin available to open new positions)`",
            "type": "string",
            "example": "3224744.0162"
          },
          "ml": {
            "description": "Margin level: `(equity / initial margin) * 100`",
            "type": "string",
            "example": "0.0000"
          },
          "uv": {
            "description": "Unexecuted value: Value of unfilled and partially filled orders",
            "type": "string",
            "example": "0.0000"
          }
        }
      },
      "balance-4": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/balance-3"
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "ordertype": {
        "description": "Order type\n",
        "type": "string",
        "enum": [
          "market",
          "limit",
          "stop-loss",
          "take-profit",
          "stop-loss-limit",
          "take-profit-limit",
          "trailing-stop",
          "trailing-stop-limit",
          "settle-position"
        ]
      },
      "oflags": {
        "description": "Comma delimited list of order flags\n\n  * `post` post-only order (available when ordertype = limit)\n  * `fcib` prefer fee in base currency (default if selling)\n  * `fciq` prefer fee in quote currency (default if buying, mutually exclusive with `fcib`)\n  * `nompp` disable [market price protection](https://support.kraken.com/hc/en-us/articles/201648183-Market-Price-Protection) for market orders\n  * `viqc`  order volume expressed in quote currency. This is supported only for market orders.\n",
        "type": "string"
      },
      "order": {
        "title": "OpenOrder",
        "description": "Open Order",
        "type": "object",
        "properties": {
          "refid": {
            "description": "Referral order transaction ID that created this order",
            "type": "string",
            "nullable": true
          },
          "userref": {
            "description": "User reference id",
            "type": "integer",
            "nullable": true
          },
          "status": {
            "description": "Status of order\n  * `pending` = order pending book entry\n  * `open` = open order\n  * `closed` = closed order\n  * `canceled` = order canceled\n  * `expired` = order expired\n",
            "type": "string",
            "enum": [
              "pending",
              "open",
              "closed",
              "canceled",
              "expired"
            ]
          },
          "opentm": {
            "description": "Unix timestamp of when order was placed",
            "type": "number"
          },
          "starttm": {
            "description": "Unix timestamp of order start time (or 0 if not set)",
            "type": "number"
          },
          "expiretm": {
            "description": "Unix timestamp of order end time (or 0 if not set)",
            "type": "number"
          },
          "descr": {
            "title": "OrderDescription",
            "description": "Order description info",
            "type": "object",
            "properties": {
              "pair": {
                "description": "Asset pair",
                "type": "string"
              },
              "type": {
                "description": "Type of order (`buy` or `sell`)",
                "type": "string",
                "enum": [
                  "buy",
                  "sell"
                ]
              },
              "ordertype": {
                "$ref": "#/components/schemas/ordertype"
              },
              "price": {
                "description": "Price:\n\n* Limit price for `limit` orders\n* Trigger price for `stop-loss`, `stop-loss-limit`, `take-profit`, `take-profit-limit`, `trailing-stop` and `trailing-stop-limit` orders\n",
                "type": "string"
              },
              "price2": {
                "description": "Secondary Price:\n\n* Limit price for `stop-loss-limit`, `take-profit-limit` and `trailing-stop-limit` orders\n",
                "type": "string"
              },
              "leverage": {
                "description": "Amount of leverage",
                "type": "string"
              },
              "order": {
                "description": "Order description",
                "type": "string"
              },
              "close": {
                "description": "Conditional close order description (if conditional close set)",
                "type": "string"
              }
            }
          },
          "vol": {
            "description": "Volume of order (base currency)",
            "type": "string"
          },
          "vol_exec": {
            "description": "Volume executed (base currency)",
            "type": "string"
          },
          "cost": {
            "description": "Total cost (quote currency unless)",
            "type": "string"
          },
          "fee": {
            "description": "Total fee (quote currency)",
            "type": "string"
          },
          "price": {
            "description": "Average price (quote currency)",
            "type": "string"
          },
          "stopprice": {
            "description": "Stop price (quote currency)",
            "type": "string"
          },
          "limitprice": {
            "description": "Triggered limit price (quote currency, when limit based order type triggered)",
            "type": "string"
          },
          "trigger": {
            "description": "Price signal used to trigger `stop-loss`, `stop-loss-limit`, `take-profit`, `take-profit-limit`, `trailing-stop` and `trailing-stop-limit` orders\n>  Note: This `trigger` type will also apply to any associated conditional close orders.\n",
            "type": "string",
            "enum": [
              "last",
              "index"
            ],
            "default": "last"
          },
          "misc": {
            "description": "Comma delimited list of miscellaneous info\n\n  * `stopped` triggered by stop price\n  * `touched` triggered by touch price\n  * `liquidated` liquidation\n  * `partial` partial fill\n",
            "type": "string"
          },
          "oflags": {
            "$ref": "#/components/schemas/oflags"
          },
          "trades": {
            "description": "List of trade IDs related to order (if trades info requested and data available)",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "open": {
        "title": "OpenOrder",
        "description": "Open Order",
        "allOf": [
          {
            "$ref": "#/components/schemas/order"
          }
        ]
      },
      "open-2": {
        "type": "object",
        "properties": {
          "result": {
            "title": "OpenOrders",
            "description": "Open Orders",
            "type": "object",
            "properties": {
              "open": {
                "type": "object",
                "additionalProperties": {
                  "x-additionalPropertiesName": "txid",
                  "$ref": "#/components/schemas/open"
                }
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "closed": {
        "title": "ClosedOrder",
        "description": "Closed Order",
        "allOf": [
          {
            "$ref": "#/components/schemas/order"
          },
          {
            "type": "object",
            "properties": {
              "closetm": {
                "description": "Unix timestamp of when order was closed",
                "type": "number"
              },
              "reason": {
                "description": "Additional info on status (if any)",
                "type": "string"
              }
            }
          }
        ]
      },
      "closed-2": {
        "type": "object",
        "properties": {
          "result": {
            "title": "ClosedOrders",
            "description": "Closed Orders",
            "type": "object",
            "properties": {
              "closed": {
                "type": "object",
                "additionalProperties": {
                  "x-additionalPropertiesName": "txid",
                  "$ref": "#/components/schemas/closed"
                }
              },
              "count": {
                "description": "Amount of available order info matching criteria",
                "type": "integer"
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "query": {
        "title": "Query Orders Info Request Body",
        "required": [
          "nonce",
          "txid"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "trades": {
            "description": "Whether or not to include trades related to position in output",
            "type": "boolean",
            "default": false
          },
          "userref": {
            "description": "Restrict results to given user reference id",
            "type": "integer",
            "format": "int32"
          },
          "txid": {
            "description": "Comma delimited list of transaction IDs to query info about (50 maximum)",
            "type": "string"
          },
          "consolidate_taker": {
            "description": "Whether or not to consolidate trades by individual taker trades",
            "type": "boolean",
            "default": true
          }
        }
      },
      "query-2": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "txid",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/open"
                },
                {
                  "$ref": "#/components/schemas/closed"
                }
              ]
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "trade-2": {
        "title": "Trade",
        "description": "Trade Info",
        "type": "object",
        "properties": {
          "ordertxid": {
            "description": "Order responsible for execution of trade",
            "type": "string"
          },
          "postxid": {
            "description": "Position responsible for execution of trade",
            "type": "string"
          },
          "pair": {
            "description": "Asset pair",
            "type": "string"
          },
          "time": {
            "description": "Unix timestamp of trade",
            "type": "number"
          },
          "type": {
            "description": "Type of order (buy/sell)",
            "type": "string"
          },
          "ordertype": {
            "description": "Order type",
            "type": "string"
          },
          "price": {
            "description": "Average price order was executed at (quote currency)",
            "type": "string"
          },
          "cost": {
            "description": "Total cost of order (quote currency)",
            "type": "string"
          },
          "fee": {
            "description": "Total fee (quote currency)",
            "type": "string"
          },
          "vol": {
            "description": "Volume (base currency)",
            "type": "string"
          },
          "margin": {
            "description": "Initial margin (quote currency)",
            "type": "string"
          },
          "leverage": {
            "description": "Amount of leverage used in trade",
            "type": "string"
          },
          "misc": {
            "description": "Comma delimited list of miscellaneous info:\n* `closing` &mdash; Trade closes all or part of a position\n",
            "type": "string"
          },
          "ledgers": {
            "description": "List of ledger ids for entries associated with trade\n",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trade_id": {
            "description": "Unique identifier of trade executed",
            "type": "integer"
          },
          "maker": {
            "description": "`true` if trade was executed with user as the maker, `false` if taker\n",
            "type": "boolean"
          },
          "posstatus": {
            "description": "Position status (open/closed)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n",
            "type": "string"
          },
          "cprice": {
            "description": "Average price of closed portion of position (quote currency)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n",
            "type": "number"
          },
          "ccost": {
            "description": "Total cost of closed portion of position (quote currency)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n",
            "type": "number"
          },
          "cfee": {
            "description": "Total fee of closed portion of position (quote currency)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n",
            "type": "number"
          },
          "cvol": {
            "description": "Total fee of closed portion of position (quote currency)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n",
            "type": "number"
          },
          "cmargin": {
            "description": "Total margin freed in closed portion of position (quote currency)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n",
            "type": "number"
          },
          "net": {
            "description": "Net profit/loss of closed portion of position (quote currency, quote currency scale)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n",
            "type": "number"
          },
          "trades": {
            "description": "List of closing trades for position (if available)\n<br><sub><sup>Only present if trade opened a position</sub></sup>\n",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "history": {
        "title": "TradeHistory",
        "description": "Trade History",
        "type": "object",
        "properties": {
          "count": {
            "description": "Amount of available trades matching criteria",
            "type": "integer"
          },
          "trades": {
            "description": "Trade info",
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "txid",
              "$ref": "#/components/schemas/trade-2"
            }
          }
        }
      },
      "history-2": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/history"
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "ledger": {
        "title": "LedgerEntry",
        "description": "Ledger Entry",
        "type": "object",
        "properties": {
          "refid": {
            "description": "Reference Id",
            "type": "string"
          },
          "time": {
            "description": "Unix timestamp of ledger",
            "type": "number"
          },
          "type": {
            "description": "Type of ledger entry",
            "type": "string",
            "enum": [
              "none",
              "trade",
              "deposit",
              "withdrawal",
              "transfer",
              "margin",
              "adjustment",
              "rollover",
              "spend",
              "receive",
              "settled",
              "credit",
              "staking",
              "reward",
              "dividend",
              "sale",
              "conversion",
              "nfttrade",
              "nftcreatorfee",
              "nftrebate",
              "custodytransfer"
            ]
          },
          "subtype": {
            "description": "Additional info relating to the ledger entry type, where applicable",
            "type": "string"
          },
          "aclass": {
            "description": "Asset class",
            "type": "string"
          },
          "asset": {
            "description": "Asset",
            "type": "string"
          },
          "amount": {
            "description": "Transaction amount",
            "type": "string"
          },
          "fee": {
            "description": "Transaction fee",
            "type": "string"
          },
          "balance": {
            "description": "Resulting balance",
            "type": "string"
          }
        }
      },
      "info-3": {
        "type": "object",
        "properties": {
          "result": {
            "title": "LedgersInfo",
            "description": "Ledgers Info",
            "type": "object",
            "properties": {
              "ledger": {
                "type": "object",
                "additionalProperties": {
                  "x-additionalPropertiesName": "ledger_id",
                  "$ref": "#/components/schemas/ledger"
                }
              },
              "count": {
                "description": "Amount of available ledger info matching criteria",
                "type": "integer"
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "query-3": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": {
              "x-additionalPropertiesName": "ledger_id",
              "$ref": "#/components/schemas/ledger"
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "fees": {
        "title": "FeeTierInfo",
        "description": "Fee Tier Info",
        "type": "object",
        "properties": {
          "fee": {
            "description": "Current fee (in percent)",
            "type": "string"
          },
          "min_fee": {
            "description": "minimum fee for pair (if not fixed fee)",
            "type": "string"
          },
          "max_fee": {
            "description": "maximum fee for pair (if not fixed fee)",
            "type": "string"
          },
          "next_fee": {
            "description": "next tier's fee for pair (if not fixed fee,  null if at lowest fee tier)",
            "type": "string",
            "nullable": true
          },
          "tier_volume": {
            "description": "volume level of current tier (if not fixed fee. null if at lowest fee tier)",
            "type": "string",
            "nullable": true
          },
          "next_volume": {
            "description": "volume level of next tier (if not fixed fee. null if at lowest fee tier)",
            "type": "string",
            "nullable": true
          }
        }
      },
      "volume": {
        "type": "object",
        "properties": {
          "result": {
            "title": "TradeVolume",
            "description": "Trade Volume",
            "type": "object",
            "properties": {
              "currency": {
                "description": "Fee volume currency (will always be USD)",
                "type": "string"
              },
              "volume": {
                "description": "Current fee discount volume (in USD, breakdown by subaccount if applicable and logged in to master account)",
                "type": "string"
              },
              "fees": {
                "description": "Taker fees that will be applied for each `pair` included in the request. Default `None` if `pair` is not requested.",
                "type": "object",
                "additionalProperties": {
                  "x-additionalPropertiesName": "pair",
                  "$ref": "#/components/schemas/fees"
                }
              },
              "fees_maker": {
                "description": "Maker fees that will be applied for this each `pair` included in the request. Default `None` if `pair` is not requested.",
                "type": "object",
                "additionalProperties": {
                  "x-additionalPropertiesName": "pair",
                  "$ref": "#/components/schemas/fees"
                }
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "add": {
        "title": "Add Standard Order Request Body",
        "required": [
          "nonce",
          "pair",
          "type",
          "ordertype",
          "volume"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "userref": {
            "description": "User reference id\n\n`userref` is an optional user-specified integer id that can be associated with any number of orders. Many clients choose a `userref` corresponding to a unique integer id generated by their systems (e.g. a timestamp). However, because we don't enforce uniqueness on our side, it can also be used to easily group orders by pair, side, strategy, etc. This allows clients to more readily cancel or query information about orders in a particular group, with fewer API calls by using `userref` instead of our `txid`, where supported.\n",
            "type": "integer",
            "format": "int32"
          },
          "ordertype": {
            "$ref": "#/components/schemas/ordertype"
          },
          "type": {
            "description": "Order direction (buy/sell)",
            "type": "string",
            "enum": [
              "buy",
              "sell"
            ]
          },
          "volume": {
            "description": "Order quantity in terms of the base asset\n> Note: Volume can be specified as `0` for closing margin orders to automatically fill the requisite quantity.\n",
            "type": "string"
          },
          "displayvol": {
            "description": "Used to create an iceberg order, this is the visible order quantity in terms of the base asset. The rest of the order will be hidden, although the full `volume` can be filled at any time by any order of that size or larger that matches in the order book. `displayvol` can only be used with the `limit` order type, must be greater than `0`, and less than `volume`.\n",
            "type": "string"
          },
          "pair": {
            "description": "Asset pair `id` or `altname`",
            "type": "string"
          },
          "price": {
            "description": "Price:\n* Limit price for `limit` orders\n* Trigger price for `stop-loss`, `stop-loss-limit`, `take-profit`, `take-profit-limit`, `trailing-stop` and `trailing-stop-limit` orders\n\nNotes:\n* Relative Prices: Either `price` or `price2` can be preceded by `+`, `-`, or `#` to specify the order price as an offset relative to the last traded price. `+` adds the amount to, and `-` subtracts the amount from the last traded price. `#` will either add or subtract the amount to the last traded price, depending on the direction and order type used. Prices can also be suffixed with a `%` to signify the relative amount as a percentage, rather than an absolute price difference.\n* Trailing Stops: Must use a relative price for this field, namely the `+` prefix, from which the direction will be automatic based on if the original order is a buy or sell (no need to use `-` or `#`). The `%` suffix also works for these order types to use a relative percentage price.\n",
            "type": "string"
          },
          "price2": {
            "description": "Secondary Price:\n* Limit price for `stop-loss-limit`, `take-profit-limit` and `trailing-stop-limit` orders\nNote:\n* Trailing Stops: Must use a relative price for this field, namely one of the `+` or `-` prefixes. This will provide the offset from the trigger price to the limit price, i.e. +0 would set the limit price equal to the trigger price. The `%` suffix also works for this field to use a relative percentage limit price.\n",
            "type": "string"
          },
          "trigger": {
            "description": "Price signal used to trigger `stop-loss`, `stop-loss-limit`, `take-profit`, `take-profit-limit`, `trailing-stop` and `trailing-stop-limit` orders\nNotes:\n* This `trigger` type will also be used for any associated conditional close orders.\n* To keep triggers serviceable, the last price will be used as fallback reference price during connectivity issues with external index feeds.\n",
            "type": "string",
            "enum": [
              "index",
              "last"
            ],
            "default": "last"
          },
          "leverage": {
            "description": "Amount of leverage desired (default: none)",
            "type": "string"
          },
          "reduce_only": {
            "description": "If `true`, order will only reduce a currently open position, not increase it or open a new position.",
            "type": "boolean",
            "default": false
          },
          "stptype": {
            "description": "Self trade prevention behavior definition:\n* `cancel-newest` - if self trade is triggered, arriving order will be canceled\n* `cancel-oldest` - if self trade is triggered, resting order will be canceled\n* `cancel-both` - if self trade is triggered, both arriving and resting orders will be canceled\n",
            "type": "string",
            "enum": [
              "cancel-newest",
              "cancel-oldest",
              "cancel-both"
            ],
            "default": "cancel-newest"
          },
          "oflags": {
            "$ref": "#/components/schemas/oflags"
          },
          "timeinforce": {
            "description": "Time-in-force of the order to specify how long it should remain in the order book before being cancelled. GTC (Good-'til-cancelled) is default if the parameter is omitted. IOC (immediate-or-cancel) will immediately execute the amount possible and cancel any remaining balance rather than resting in the book. GTD (good-'til-date), if specified, must coincide with a desired `expiretm`.\n",
            "type": "string",
            "enum": [
              "GTC",
              "IOC",
              "GTD"
            ],
            "default": "GTC"
          },
          "starttm": {
            "description": "Scheduled start time, can be specified as an absolute timestamp or as a number of seconds in the future:\n  * `0` now (default)\n  * `<n>` = unix timestamp of start time\n  * `+<n>` = schedule start time `<n>` seconds from now\n    * Note that URL encoding of the `+` character changes it to a space, so please use `%2b` followed by the number of seconds instead of `+`\n",
            "type": "string"
          },
          "expiretm": {
            "description": "Expiration time, also can be specified as an absolute timestamp or as a number of seconds in the future:\n  * `0` no expiration (default)\n  * `<n>` = unix timestamp of expiration time\n  * `+<n>` = expire `<n>` seconds from now, minimum 5 seconds\n    * Note that URL encoding of the `+` character changes it to a space, so please use `%2b` followed by the number of seconds instead of `+`\n",
            "type": "string"
          },
          "close[ordertype]": {
            "description": "Conditional close order type \n> Note: [Conditional close orders](https://support.kraken.com/hc/en-us/articles/360038640052-Conditional-Close) are triggered by execution of the primary order in the same quantity and opposite direction, but once triggered are __independent orders__ that may reduce or increase net position\n",
            "type": "string",
            "enum": [
              "limit",
              "stop-loss",
              "take-profit",
              "stop-loss-limit",
              "take-profit-limit",
              "trailing-stop",
              "trailing-stop-limit"
            ]
          },
          "close[price]": {
            "description": "Conditional close order `price`\n",
            "type": "string"
          },
          "close[price2]": {
            "description": "Conditional close order `price2`\n",
            "type": "string"
          },
          "deadline": {
            "type": "string",
            "description": "RFC3339 timestamp (e.g. 2021-04-01T00:18:45Z) after which the matching engine should reject the new order request, in presence of latency or order queueing: min now() + 2 seconds, max now() + 60 seconds.\n"
          },
          "validate": {
            "type": "boolean",
            "description": "Validate inputs only. Do not submit order.",
            "default": false
          }
        }
      },
      "add-2": {
        "type": "object",
        "properties": {
          "result": {
            "title": "OrderAdded",
            "type": "object",
            "properties": {
              "descr": {
                "description": "Order description info",
                "type": "object",
                "properties": {
                  "order": {
                    "description": "Order description",
                    "type": "string"
                  },
                  "close": {
                    "description": "Conditional close order description, if applicable",
                    "type": "string"
                  }
                }
              },
              "txid": {
                "description": "Transaction IDs for order\n<br><sup><sub>(if order was added successfully)</sup></sub>\n",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "batchadd": {
        "title": "Add Standard Order Request Body",
        "required": [
          "nonce",
          "orders",
          "pair"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "orders": {
            "type": "array",
            "items": {
              "required": [
                "ordertype",
                "type",
                "volume"
              ],
              "type": "object",
              "properties": {
                "userref": {
                  "description": "User reference id\n`userref` is an optional user-specified integer id that can be associated with any number of orders. Many clients choose a `userref` corresponding to a unique integer id generated by their systems (e.g. a timestamp). However, because we don't enforce uniqueness on our side, it can also be used to easily group orders by pair, side, strategy, etc. This allows clients to more readily cancel or query information about orders in a particular group, with fewer API calls by using `userref` instead of our `txid`, where supported.\n",
                  "type": "integer",
                  "format": "int32"
                },
                "ordertype": {
                  "description": "Order type\n",
                  "type": "string",
                  "enum": [
                    "market",
                    "limit",
                    "stop-loss",
                    "take-profit",
                    "stop-loss-limit",
                    "take-profit-limit",
                    "settle-position"
                  ]
                },
                "type": {
                  "description": "Order direction (buy/sell)",
                  "type": "string",
                  "enum": [
                    "buy",
                    "sell"
                  ]
                },
                "volume": {
                  "description": "Order quantity in terms of the base asset\n> Note: Volume can be specified as `0` for closing margin orders to automatically fill the requisite quantity.\n",
                  "type": "string"
                },
                "displayvol": {
                  "description": "Used to create a iceberg orders, this is the visible order quantity in terms of the base asset. The rest of the order will be hidden, although the full `volume` can be filled at any time by any order of that size or larger that matches in the order book. `displayvol` can only be used with the `limit` order type, must be greater than `0`, and less than `volume`.\n",
                  "type": "string"
                },
                "price": {
                  "description": "Price:\n* Limit price for `limit` orders\n* Trigger price for `stop-loss`, `stop-loss-limit`, `take-profit`, and `take-profit-limit` orders\n\nNotes:\n* Relative Prices: Either `price` or `price2` can be preceded by `+`, `-`, or `#` to specify the order price as an offset relative to the last traded price. `+` adds the amount to, and `-` subtracts the amount from the last traded price. `#` will either add or subtract the amount to the last traded price, depending on the direction and order type used. Prices can also be suffixed with a `%` to signify the relative amount as a percentage, rather than an absolute price difference.\n",
                  "type": "string"
                },
                "price2": {
                  "description": "Secondary Price:\n* Limit price for `stop-loss-limit` and `take-profit-limit`\n",
                  "type": "string"
                },
                "trigger": {
                  "description": "Price signal used to trigger `stop-loss`, `stop-loss-limit`, `take-profit`, and `take-profit-limit` orders\nNotes:\n* To keep triggers serviceable, the last price will be used as fallback reference price during connectivity issues with external index feeds.\n",
                  "type": "string",
                  "enum": [
                    "index",
                    "last"
                  ],
                  "default": "last"
                },
                "leverage": {
                  "description": "Amount of leverage desired (default: none)\n",
                  "type": "string"
                },
                "reduce_only": {
                  "description": "If `true`, order will only reduce a currently open position, not increase it or open a new position.",
                  "type": "boolean",
                  "default": false
                },
                "stptype": {
                  "description": "Self trade prevention behaviour definition:\n* `cancel-newest` - if self trade is triggered, arriving order will be canceled\n* `cancel-oldest` - if self trade is triggered, resting order will be canceled\n* `cancel-both` - if self trade is triggered, both arriving and resting orders will be canceled\n",
                  "type": "string",
                  "enum": [
                    "cancel-newest",
                    "cancel-oldest",
                    "cancel-both"
                  ],
                  "default": "cancel-newest"
                },
                "oflags": {
                  "$ref": "#/components/schemas/oflags"
                },
                "timeinforce": {
                  "description": "Time-in-force of the order to specify how long it should remain in the order book before being cancelled. GTC (Good-'til-cancelled) is default if the parameter is omitted. IOC (immediate-or-cancel) will immediately execute the amount possible and cancel any remaining balance rather than resting in the book. GTD (good-'til-date), if specified, must coincide with a desired `expiretm`.\n",
                  "type": "string",
                  "enum": [
                    "GTC",
                    "IOC",
                    "GTD"
                  ],
                  "default": "GTC"
                },
                "starttm": {
                  "description": "Scheduled start time, can be specified as an absolute timestamp or as a number of seconds in the future:\n * `0` now (default)\n * `+<n>` schedule start time <n> seconds from now\n * `<n>` = unix timestamp of start time\n",
                  "type": "string"
                },
                "expiretm": {
                  "description": "Expiration time:\n * `0` no expiration (default)\n * `+<n>` = expire <n> seconds from now, minimum 5 seconds\n * `<n>` = unix timestamp of expiration time\n",
                  "type": "string"
                }
              }
            }
          },
          "pair": {
            "description": "Asset pair `id` or `altname`",
            "type": "string"
          },
          "deadline": {
            "type": "string",
            "description": "RFC3339 timestamp (e.g. 2021-04-01T00:18:45Z) after which the matching engine should reject the new order request, in presence of latency or order queueing. min now() + 2 seconds, max now() + 60 seconds. \n"
          },
          "validate": {
            "type": "boolean",
            "description": "Validate inputs only. Do not submit order.",
            "default": false
          }
        }
      },
      "batchadd-2": {
        "type": "object",
        "properties": {
          "result": {
            "title": "Result",
            "type": "object",
            "properties": {
              "orders": {
                "title": "Orders",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "descr": {
                      "description": "Order description info",
                      "type": "object",
                      "properties": {
                        "order": {
                          "type": "string"
                        }
                      }
                    },
                    "error": {
                      "description": "Error description from individual order processing",
                      "type": "string"
                    },
                    "txid": {
                      "description": "Transaction ID for order\n<br><sup><sub>(if order was added successfully)</sup></sub>\n",
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "edit": {
        "title": "Edit Standard Order Request Body",
        "required": [
          "nonce",
          "pair",
          "txid"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "userref": {
            "description": "User reference id\n\n`userref` is an optional user-specified integer id associated with edit request. \n >  Note: userref from parent order will not be retained on the new order after edit.\n",
            "type": "integer",
            "format": "int32"
          },
          "txid": {
            "description": "Original Order ID or User Reference Id (userref) which is user-specified integer id used with the original order. If userref is not unique and was used with multiple order, edit request is denied with an error.",
            "oneOf": [
              {
                "type": "string",
                "title": "string"
              },
              {
                "type": "integer",
                "title": "integer"
              }
            ]
          },
          "volume": {
            "description": "Order quantity in terms of the base asset.\n",
            "type": "string"
          },
          "displayvol": {
            "description": "Used to edit an iceberg order, this is the visible order quantity in terms of the base asset. The rest of the order will be hidden, although the full `volume` can be filled at any time by any order of that size or larger that matches in the order book. `displayvol` can only be used with the `limit` order type, must be greater than `0`, and less than `volume`.\n",
            "type": "string"
          },
          "pair": {
            "description": "Asset pair `id` or `altname`",
            "type": "string"
          },
          "price": {
            "description": "Price:\n* Limit price for `limit` orders\n* Trigger price for `stop-loss`, `stop-loss-limit`, `take-profit`, `take-profit-limit`, `trailing-stop` and `trailing-stop-limit` orders\n\nNotes:\n* Relative Prices: Either `price` or `price2` can be preceded by `+`, `-`, or `#` to specify the order price as an offset relative to the last traded price. `+` adds the amount to, and `-` subtracts the amount from the last traded price. `#` will either add or subtract the amount to the last traded price, depending on the direction and order type used. Prices can also be suffixed with a `%` to signify the relative amount as a percentage, rather than an absolute price difference.\n* Trailing Stops: Must use a relative price for this field, namely the `+` prefix, from which the direction will be automatic based on if the original order is a buy or sell (no need to use `-` or `#`). The `%` suffix also works for these order types to use a relative percentage price.\n",
            "type": "string"
          },
          "price2": {
            "description": "Secondary Price:\n* Limit price for `stop-loss-limit`, `take-profit-limit` and `trailing-stop-limit` orders\nNote:\n* Trailing Stops: Must use a relative price for this field, namely one of the `+` or `-` prefixes. This will provide the offset from the trigger price to the limit price, i.e. +0 would set the limit price equal to the trigger price. The `%` suffix also works for this field to use a relative percentage limit price.\n",
            "type": "string"
          },
          "oflags": {
            "description": "Comma delimited list of order flags. Only these flags can be changed: - post post-only order (available when ordertype = limit). All the flags from the parent order are retained except post-only. post-only needs to be explicitly mentioned on edit request.\n"
          },
          "deadline": {
            "type": "string",
            "description": "RFC3339 timestamp (e.g. 2021-04-01T00:18:45Z) after which the matching engine should reject the new order request, in presence of latency or order queueing. min now() + 2 seconds, max now() + 60 seconds.  \n"
          },
          "cancel_response": {
            "description": "Used to interpret if client wants to receive pending replace, before the order is completely replaced\n",
            "type": "boolean"
          },
          "validate": {
            "type": "boolean",
            "description": "Validate inputs only. Do not submit order.",
            "default": false
          }
        }
      },
      "edit-2": {
        "type": "object",
        "properties": {
          "result": {
            "title": "OrderEdited",
            "type": "object",
            "properties": {
              "descr": {
                "description": "Order description info",
                "type": "object",
                "properties": {
                  "order": {
                    "description": "Order description",
                    "type": "string"
                  }
                }
              },
              "txid": {
                "description": "New Transaction ID\n<br><sup><sub>(if order was added successfully)</sup></sub>\n",
                "type": "string"
              },
              "newuserref": {
                "description": "Original userref if passed with the request\n",
                "type": "string"
              },
              "olduserref": {
                "description": "Original userref if passed with the request\n",
                "type": "string"
              },
              "orders_cancelled": {
                "description": "Number of orders cancelled (either 0 or 1)\n",
                "type": "integer"
              },
              "originaltxid": {
                "description": "Original transaction ID\n",
                "type": "string"
              },
              "status": {
                "description": "Status of the order: Ok or Err\n",
                "type": "string"
              },
              "volume": {
                "description": "Updated volume\n",
                "type": "string"
              },
              "price": {
                "description": "Updated price\n",
                "type": "string"
              },
              "price2": {
                "description": "Updated price2\n",
                "type": "string"
              },
              "error_message": {
                "description": "Error message if unsuccessful\n",
                "type": "string"
              }
            }
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "cancel": {
        "title": "Cancel Open Order Request Body",
        "required": [
          "nonce",
          "txid"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "txid": {
            "description": "Open order transaction ID (txid) or user reference (userref)",
            "oneOf": [
              {
                "type": "string",
                "title": "string"
              },
              {
                "type": "integer",
                "title": "integer"
              }
            ]
          }
        }
      },
      "cancel-2": {
        "type": "object",
        "properties": {
          "result": {
            "title": "OrderCancelled",
            "type": "object",
            "properties": {
              "count": {
                "description": "Number of orders cancelled",
                "type": "integer",
                "format": "int32"
              },
              "pending": {
                "description": "If true, orders are pending cancellation",
                "type": "boolean"
              }
            }
          },
          "error": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/error"
            }
          }
        }
      },
      "batchcancel": {
        "title": "Batch Cancel Open Orders Request Body",
        "required": [
          "nonce",
          "orders"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "orders": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "txid": {
                  "description": "Open order transaction IDs (txid) or user references (userref), up to a maximum of 50 total unique IDs/references.",
                  "oneOf": [
                    {
                      "type": "string",
                      "title": "string"
                    },
                    {
                      "type": "integer",
                      "title": "integer"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "methods": {
        "title": "Get Desposit Methods Request Body",
        "required": [
          "nonce",
          "asset"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "asset": {
            "description": "Asset being deposited",
            "type": "string"
          },
          "aclass": {
            "description": "Asset class being deposited (optional)",
            "type": "string",
            "default": "currency"
          }
        }
      },
      "method": {
        "title": "depositMethod",
        "description": "Deposit Method",
        "type": "object",
        "properties": {
          "method": {
            "description": "Name of deposit method",
            "type": "string"
          },
          "limit": {
            "description": "Maximum net amount that can be deposited right now, or false if no limit"
          },
          "fee": {
            "description": "Amount of fees that will be paid",
            "type": "string"
          },
          "address-setup-fee": {
            "description": "Whether or not method has an address setup fee",
            "type": "string"
          },
          "gen-address": {
            "type": "boolean",
            "description": "Whether new addresses can be generated for this method."
          },
          "minimum": {
            "type": "string",
            "description": "Minimum net amount that can be deposited right now"
          }
        }
      },
      "methods-2": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/method"
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "addresses": {
        "required": [
          "nonce",
          "asset",
          "method"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "asset": {
            "description": "Asset being deposited",
            "type": "string"
          },
          "method": {
            "description": "Name of the deposit method",
            "type": "string"
          },
          "new": {
            "description": "Whether or not to generate a new address",
            "type": "boolean",
            "default": false
          },
          "amount": {
            "description": "Amount you wish to deposit (only required for `method=Bitcoin Lightning`)",
            "oneOf": [
              {
                "type": "string",
                "title": "string"
              },
              {
                "type": "integer",
                "title": "integer"
              },
              {
                "type": "number",
                "title": "number"
              }
            ]
          }
        }
      },
      "address": {
        "title": "depositAddress",
        "description": "Deposit Address",
        "type": "object",
        "properties": {
          "address": {
            "description": "Deposit Address",
            "type": "string"
          },
          "expiretm": {
            "description": "Expiration time in unix timestamp, or 0 if not expiring",
            "type": "string"
          },
          "new": {
            "description": "Whether or not address has ever been used",
            "type": "boolean"
          },
          "tag": {
            "description": "Contains tags for [XRP](https://support.kraken.com/hc/en-us/articles/360000184443-Destination-Tag-for-Ripple-XRP-deposits) deposit addresses and memos for [STX](https://support.kraken.com/hc/en-us/articles/10902306995860-Memo-for-Stacks-STX-deposits), [XLM](https://support.kraken.com/hc/en-us/articles/360000184543-Memo-for-Stellar-Lumens-XLM-deposits), and [EOS](https://support.kraken.com/hc/en-us/articles/360001099203-Memo-for-EOS-deposits) deposit addresses",
            "type": "string"
          }
        }
      },
      "addresses-2": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/address"
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "recent": {
        "title": "Get Status of Recent Deposits Request Body",
        "required": [
          "nonce"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "asset": {
            "description": "Filter for specific asset being deposited",
            "type": "string"
          },
          "aclass": {
            "description": "Filter for specific asset class being deposited",
            "type": "string",
            "default": "currency"
          },
          "method": {
            "description": "Filter for specific name of deposit method",
            "type": "string"
          },
          "start": {
            "description": "Start timestamp, deposits created strictly before will not be included in the response",
            "type": "string"
          },
          "end": {
            "description": "End timestamp, deposits created strictly after will be not be included in the response",
            "type": "string"
          },
          "cursor": {
            "description": "true/false to enable/disable paginated response (boolean) or cursor for next page of results (string)",
            "default": false,
            "anyOf": [
              {
                "type": "boolean",
                "description": "Enable/disable paginated response"
              },
              {
                "type": "string",
                "description": "Cursor for next page of results"
              }
            ]
          },
          "limit": {
            "description": "Number of results to include per page",
            "type": "integer",
            "default": 25
          }
        }
      },
      "deposit": {
        "title": "deposit",
        "description": "deposit",
        "type": "object",
        "properties": {
          "method": {
            "description": "Name of deposit method",
            "type": "string"
          },
          "aclass": {
            "description": "Asset class",
            "type": "string"
          },
          "asset": {
            "description": "Asset",
            "type": "string"
          },
          "refid": {
            "description": "Reference ID",
            "type": "string"
          },
          "txid": {
            "description": "Method transaction ID",
            "type": "string"
          },
          "info": {
            "description": "Method transaction information",
            "type": "string"
          },
          "amount": {
            "description": "Amount deposited",
            "type": "string"
          },
          "fee": {
            "description": "Fees paid"
          },
          "time": {
            "description": "Unix timestamp when request was made",
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "description": "Status of deposit<br>\n<sup><sub>For information about the status, please refer to the [IFEX financial transaction states](https://github.com/globalcitizen/ifex-protocol/blob/master/draft-ifex-00.txt#L837).</sup></sub>\n"
          },
          "status-prop": {
            "description": "Addition status properties <sup><sub>(if available)</sup></sub><br>\n  * `return` A return transaction initiated by Kraken\n  * `onhold` Deposit is on hold pending review\n",
            "type": "string",
            "enum": [
              "return",
              "onhold"
            ]
          },
          "originators": {
            "description": "Client sending transaction id(s) for deposits that credit with a sweeping transaction\n",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "recent-2": {
        "type": "object",
        "properties": {
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/deposit"
              },
              {
                "properties": {
                  "deposit": {
                    "$ref": "#/components/schemas/deposit"
                  },
                  "next_cursor": {
                    "description": "If pagination is set via `cursor` parameter, provides next input to use for `cursor` in pagination",
                    "type": "string"
                  }
                }
              }
            ]
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "methods-3": {
        "required": [
          "nonce"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "asset": {
            "description": "Filter methods for specific asset",
            "type": "string"
          },
          "aclass": {
            "description": "Filter methods for specific asset class",
            "type": "string",
            "default": "currency"
          },
          "network": {
            "description": "Filter methods for specific network",
            "type": "string"
          }
        }
      },
      "methods-4": {
        "type": "object",
        "properties": {
          "result": {
            "title": "withdrawalMethods",
            "description": "Withdrawal Methods",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "asset": {
                  "description": "Name of asset being withdrawn",
                  "type": "string"
                },
                "method": {
                  "description": "Name of the withdrawal method",
                  "type": "string"
                },
                "network": {
                  "description": "Name of the blockchain or network being withdrawn on",
                  "type": "string"
                },
                "minimum": {
                  "description": "Minimum net amount that can be withdrawn right now",
                  "type": "string"
                }
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "addresses-3": {
        "required": [
          "nonce"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "asset": {
            "description": "Filter addresses for specific asset",
            "type": "string"
          },
          "aclass": {
            "description": "Filter addresses for specific asset class",
            "type": "string",
            "default": "currency"
          },
          "method": {
            "description": "Filter addresses for specific method",
            "type": "string"
          },
          "key": {
            "description": "Find address for by withdrawal key name, as set up on your account",
            "type": "string"
          },
          "verified": {
            "description": "Filter by verification status of the withdrawal address. Withdrawal addresses successfully completing email confirmation will have a verification status of true.",
            "type": "boolean"
          }
        }
      },
      "addresses-4": {
        "type": "object",
        "properties": {
          "result": {
            "title": "withdrawalAddresses",
            "description": "Withdrawal Addresses",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "description": "Withdrawal address",
                  "type": "string"
                },
                "asset": {
                  "description": "Name of asset being withdrawn",
                  "type": "string"
                },
                "method": {
                  "description": "Name of the withdrawal method",
                  "type": "string"
                },
                "key": {
                  "description": "Withdrawal key name, as set up on your account",
                  "type": "string"
                },
                "tag": {
                  "description": "Contains tags for [XRP](https://support.kraken.com/hc/en-us/articles/360000184443-Destination-Tag-for-Ripple-XRP-deposits) deposit addresses and memos for [STX](https://support.kraken.com/hc/en-us/articles/10902306995860-Memo-for-Stacks-STX-deposits), [XLM](https://support.kraken.com/hc/en-us/articles/360000184543-Memo-for-Stellar-Lumens-XLM-deposits), and [EOS](https://support.kraken.com/hc/en-us/articles/360001099203-Memo-for-EOS-deposits) deposit addresses",
                  "type": "string"
                },
                "verified": {
                  "description": "Verification status of withdrawal address",
                  "type": "boolean"
                }
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "info-4": {
        "required": [
          "nonce",
          "asset",
          "key",
          "amount"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "asset": {
            "description": "Asset being withdrawn",
            "type": "string"
          },
          "key": {
            "description": "Withdrawal key name, as set up on your account",
            "type": "string"
          },
          "amount": {
            "description": "Amount to be withdrawn",
            "type": "string"
          }
        }
      },
      "info-5": {
        "type": "object",
        "properties": {
          "result": {
            "title": "withdrawalInfo",
            "description": "Withdrawal Info",
            "type": "object",
            "properties": {
              "method": {
                "description": "Name of the withdrawal method that will be used",
                "type": "string"
              },
              "limit": {
                "description": "Maximum net amount that can be withdrawn right now",
                "type": "string"
              },
              "amount": {
                "description": "Net amount that will be sent, after fees",
                "type": "string"
              },
              "fee": {
                "description": "Amount of fees that will be paid",
                "type": "string"
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "withdrawal": {
        "required": [
          "nonce",
          "asset",
          "key",
          "amount"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "asset": {
            "description": "Asset being withdrawn",
            "type": "string"
          },
          "key": {
            "description": "Withdrawal key name, as set up on your account",
            "type": "string"
          },
          "address": {
            "description": "Optional, crypto address that can be used to confirm address matches key (will return `Invalid withdrawal address` error if different)",
            "type": "string"
          },
          "amount": {
            "description": "Amount to be withdrawn",
            "type": "string"
          },
          "max_fee": {
            "description": "Optional, if the processed withdrawal fee is higher than `max_fee`, withdrawal will fail with `EFunding:Max fee exceeded`",
            "type": "string"
          }
        }
      },
      "withdrawal-2": {
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "properties": {
              "refid": {
                "type": "string",
                "description": "Reference ID"
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "recent-3": {
        "title": "Get Status of Recent Withdrawals Request Body",
        "required": [
          "nonce"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "asset": {
            "description": "Filter for specific asset being withdrawn",
            "type": "string"
          },
          "aclass": {
            "description": "Filter for specific asset class being withdrawn",
            "type": "string",
            "default": "currency"
          },
          "method": {
            "description": "Filter for specific name of withdrawal method",
            "type": "string"
          },
          "start": {
            "description": "Start timestamp, withdrawals created strictly before will not be included in the response",
            "type": "string"
          },
          "end": {
            "description": "End timestamp, withdrawals created strictly after will be not be included in the response",
            "type": "string"
          },
          "cursor": {
            "description": "true/false to enable/disable paginated response (boolean) or cursor for next page of results (string), default false",
            "anyOf": [
              {
                "type": "boolean",
                "description": "Enable/disable paginated response"
              },
              {
                "type": "string",
                "description": "Cursor for next page of results"
              }
            ]
          },
          "limit": {
            "description": "Number of results to include per page",
            "type": "integer",
            "default": 500
          }
        }
      },
      "withdrawal-3": {
        "title": "Withdrawal",
        "description": "Withdrawal",
        "type": "object",
        "properties": {
          "method": {
            "description": "Name of withdrawal method",
            "type": "string"
          },
          "network": {
            "description": "Network name based on the funding method used",
            "type": "string"
          },
          "aclass": {
            "description": "Asset class",
            "type": "string"
          },
          "asset": {
            "description": "Asset",
            "type": "string"
          },
          "refid": {
            "description": "Reference ID",
            "type": "string"
          },
          "txid": {
            "description": "Method transaction ID",
            "type": "string"
          },
          "info": {
            "description": "Method transaction information",
            "type": "string"
          },
          "amount": {
            "description": "Amount withdrawn",
            "type": "string"
          },
          "fee": {
            "description": "Fees paid"
          },
          "time": {
            "description": "Unix timestamp when request was made",
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "description": "Status of withdraw<br>\n<sup><sub>For information about the status, please refer to the [IFEX financial transaction states](https://github.com/globalcitizen/ifex-protocol/blob/master/draft-ifex-00.txt#L837).</sup></sub>\n",
            "type": "string",
            "enum": [
              "Initial",
              "Pending",
              "Settled",
              "Success",
              "Failure"
            ]
          },
          "status-prop": {
            "description": "Addition status properties <sup><sub>(if available)</sup></sub><br>\n  * `cancel-pending` cancelation requested\n  * `canceled` canceled\n  * `cancel-denied` cancelation requested but was denied\n  * `return` a return transaction initiated by Kraken; it cannot be canceled\n  * `onhold` withdrawal is on hold pending review\n",
            "type": "string",
            "enum": [
              "cancel-pending",
              "canceled",
              "cancel-denied",
              "return",
              "onhold"
            ]
          },
          "key": {
            "description": "Withdrawal key name, as set up on your account",
            "type": "string"
          }
        }
      },
      "recent-4": {
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/withdrawal-3"
            }
          },
          "error": {
            "$ref": "#/components/schemas/error"
          }
        }
      },
      "cancel-3": {
        "title": "Request Withdrawal Cancelation Request Body",
        "required": [
          "nonce",
          "asset",
          "refid"
        ],
        "type": "object",
        "properties": {
          "nonce": {
            "$ref": "#/components/schemas/nonce"
          },
          "asset": {
            "description": "Asset being withdrawn",
            "type": "string"
          },
          "refid": {
            "description": "Withdrawal reference ID",
            "type": "string"
          }
        }
      },
      "lock": {
        "type": "object",
        "required": [
          "days",
          "percentage"
        ],
        "properties": {
          "days": {
            "description": "Days the funds are locked.",
            "type": "number"
          },
          "percentage": {
            "description": "Percentage of the funds that are locked (0 - 100)",
            "type": "number",
            "minimum": 0,
            "maximum": 100
          }
        }
      },
      "asset": {
        "title": "Staking Asset Information",
        "type": "object",
        "required": [
          "asset",
          "staking_asset",
          "rewards"
        ],
        "properties": {
          "asset": {
            "description": "Asset code/name",
            "type": "string"
          },
          "staking_asset": {
            "description": "Staking asset code/name",
            "type": "string"
          },
          "method": {
            "description": "Unique ID of the staking option (used in Stake/Unstake operations)",
            "type": "string"
          },
          "on_chain": {
            "description": "Whether the staking operation is on-chain or not.",
            "type": "boolean",
            "default": true
          },
          "can_stake": {
            "description": "Whether the user will be able to stake this asset.",
            "type": "boolean",
            "default": true
          },
          "can_unstake": {
            "description": "Whether the user will be able to unstake this asset.",
            "type": "boolean",
            "default": true
          },
          "minimum_amount": {
            "description": "Minimium amounts for staking/unstaking.",
            "type": "object",
            "required": [
              "unstaking",
              "staking"
            ],
            "properties": {
              "unstaking": {
                "type": "string",
                "default": "0"
              },
              "staking": {
                "type": "string",
                "default": "0"
              }
            }
          },
          "lock": {
            "description": "Describes the locking periods and percentages for staking/unstaking operations.",
            "type": "object",
            "properties": {
              "unstaking": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/lock"
                }
              },
              "staking": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/lock"
                }
              },
              "lockup": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/lock"
                }
              }
            }
          },
          "enabled_for_user": {
            "type": "boolean",
            "default": true
          },
          "disabled": {
            "type": "boolean"
          },
          "rewards": {
            "description": "Describes the rewards earned while staking.",
            "type": "object",
            "properties": {
              "reward": {
                "description": "Reward earned while staking",
                "type": "string"
              },
              "type": {
                "description": "Reward type",
                "type": "string",
                "enum": [
                  "percentage"
                ]
              }
            }
          }
        }
      },
      "transaction": {
        "title": "Staking Transaction Info",
        "type": "object",
        "properties": {
          "refid": {
            "description": "The reference ID of the transaction.",
            "type": "string"
          },
          "type": {
            "description": "The type of transaction.",
            "type": "string",
            "enum": [
              "bonding",
              "reward",
              "unbonding"
            ]
          },
          "asset": {
            "description": "Asset code/name",
            "type": "string"
          },
          "amount": {
            "description": "The transaction amount",
            "type": "string"
          },
          "time": {
            "description": "Unix timestamp when the transaction was initiated.",
            "type": "integer"
          },
          "bond_start": {
            "description": "Unix timestamp from the start of bond period (applicable only to `bonding` transactions).",
            "type": "integer"
          },
          "bond_end": {
            "description": "Unix timestamp of the end of bond period (applicable only to `bonding` transactions).",
            "type": "integer"
          },
          "status": {
            "description": "Transaction status",
            "type": "string",
            "enum": [
              "Initial",
              "Pending",
              "Settled",
              "Success",
              "Failure"
            ]
          }
        }
      }
    },
    "parameters": {
      "asset": {
        "in": "query",
        "name": "asset",
        "schema": {
          "type": "string"
        },
        "description": "Comma delimited list of assets to get info on (optional, default all available assets)",
        "example": "XBT,ETH"
      },
      "aclass": {
        "in": "query",
        "name": "aclass",
        "schema": {
          "type": "string"
        },
        "description": "Asset class (optional, default: `currency`)",
        "example": "currency"
      },
      "wildcard_pair": {
        "in": "query",
        "name": "pair",
        "description": "Asset pair to get data for (optional, default: all tradeable exchange pairs)",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "XBTUSD"
      },
      "pair": {
        "in": "query",
        "name": "pair",
        "description": "Asset pair to get data for",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "XBTUSD"
      }
    },
    "requestBodies": {
      "nonceOnly": {
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "required": [
                "nonce"
              ],
              "type": "object",
              "properties": {
                "nonce": {
                  "$ref": "#/components/schemas/nonce"
                }
              }
            }
          }
        }
      },
      "balance": {
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "title": "Update Account Profile Request",
              "description": "Update Account Profile Request Body",
              "required": [
                "nonce"
              ],
              "type": "object",
              "properties": {
                "nonce": {
                  "$ref": "#/components/schemas/nonce"
                },
                "asset": {
                  "description": "Base asset used to determine balance",
                  "type": "string",
                  "default": "ZUSD"
                }
              }
            }
          }
        }
      },
      "openOrders": {
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "title": "Get Open Orders Request Body",
              "required": [
                "nonce"
              ],
              "type": "object",
              "properties": {
                "nonce": {
                  "$ref": "#/components/schemas/nonce"
                },
                "trades": {
                  "description": "Whether or not to include trades related to position in output",
                  "type": "boolean",
                  "default": false
                },
                "userref": {
                  "description": "Restrict results to given user reference id",
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "closedOrders": {
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "title": "Get Closed Orders Request Body",
              "required": [
                "nonce"
              ],
              "type": "object",
              "properties": {
                "nonce": {
                  "$ref": "#/components/schemas/nonce"
                },
                "trades": {
                  "description": "Whether or not to include trades related to position in output",
                  "type": "boolean",
                  "default": false
                },
                "userref": {
                  "description": "Restrict results to given user reference id",
                  "type": "integer",
                  "format": "int32"
                },
                "start": {
                  "description": "Starting unix timestamp or order tx ID of results (exclusive)",
                  "type": "integer"
                },
                "end": {
                  "description": "Ending unix timestamp or order tx ID of results (inclusive)",
                  "type": "integer"
                },
                "ofs": {
                  "description": "Result offset for pagination",
                  "type": "integer"
                },
                "closetime": {
                  "description": "Which time to use to search",
                  "type": "string",
                  "enum": [
                    "open",
                    "close",
                    "both"
                  ],
                  "default": "both"
                },
                "consolidate_taker": {
                  "description": "Whether or not to consolidate trades by individual taker trades",
                  "type": "boolean",
                  "default": true
                }
              }
            }
          }
        }
      },
      "history": {
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "title": "Get Trades History Request Body",
              "required": [
                "nonce"
              ],
              "type": "object",
              "properties": {
                "nonce": {
                  "$ref": "#/components/schemas/nonce"
                },
                "type": {
                  "description": "Type of trade",
                  "type": "string",
                  "default": "all",
                  "enum": [
                    "all",
                    "any position",
                    "closed position",
                    "closing position",
                    "no position"
                  ]
                },
                "trades": {
                  "description": "Whether or not to include trades related to position in output",
                  "type": "boolean",
                  "default": false
                },
                "start": {
                  "description": "Starting unix timestamp or trade tx ID of results (exclusive)",
                  "type": "integer"
                },
                "end": {
                  "description": "Ending unix timestamp or trade tx ID of results (inclusive)",
                  "type": "integer"
                },
                "ofs": {
                  "description": "Result offset for pagination",
                  "type": "integer"
                },
                "consolidate_taker": {
                  "description": "Whether or not to consolidate trades by individual taker trades",
                  "type": "boolean",
                  "default": true
                },
                "ledgers": {
                  "description": "Whether or not to include related ledger ids for given trade\n<br><sub><sup>Note that setting this to true will slow request performance</sub></sup>\n",
                  "type": "boolean",
                  "default": false
                }
              }
            }
          }
        }
      },
      "query": {
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "title": "Get Trades Info Request Body",
              "required": [
                "nonce",
                "txid"
              ],
              "type": "object",
              "properties": {
                "nonce": {
                  "$ref": "#/components/schemas/nonce"
                },
                "txid": {
                  "description": "Comma delimited list of transaction IDs to query info about (20 maximum)",
                  "type": "string"
                },
                "trades": {
                  "description": "Whether or not to include trades related to position in output",
                  "type": "boolean",
                  "default": false
                }
              }
            }
          }
        }
      },
      "info": {
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "title": "Get Ledgers Info Request Body",
              "required": [
                "nonce"
              ],
              "type": "object",
              "properties": {
                "nonce": {
                  "$ref": "#/components/schemas/nonce"
                },
                "asset": {
                  "description": "Filter output by asset or comma delimited list of assets",
                  "type": "string",
                  "default": "all"
                },
                "aclass": {
                  "description": "Filter output by asset class",
                  "type": "string",
                  "default": "currency"
                },
                "type": {
                  "description": "Type of ledger to retrieve",
                  "type": "string",
                  "default": "all",
                  "enum": [
                    "all",
                    "trade",
                    "deposit",
                    "withdrawal",
                    "transfer",
                    "margin",
                    "adjustment",
                    "rollover",
                    "credit",
                    "settled",
                    "staking",
                    "dividend",
                    "sale",
                    "nft_rebate"
                  ]
                },
                "start": {
                  "description": "Starting unix timestamp or ledger ID of results (exclusive)",
                  "type": "integer"
                },
                "end": {
                  "description": "Ending unix timestamp or ledger ID of results (inclusive)",
                  "type": "integer"
                },
                "ofs": {
                  "description": "Result offset for pagination",
                  "type": "integer"
                },
                "without_count": {
                  "description": "If true, does not retrieve count of ledger entries. Request can be noticeably faster for users with many ledger entries as this avoids an extra database query.",
                  "type": "boolean",
                  "default": false
                }
              }
            }
          }
        }
      },
      "query-2": {
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "title": "Get Ledger Info Request Body",
              "required": [
                "nonce",
                "id"
              ],
              "type": "object",
              "properties": {
                "nonce": {
                  "$ref": "#/components/schemas/nonce"
                },
                "id": {
                  "description": "Comma delimited list of ledger IDs to query info about (20 maximum)",
                  "type": "string"
                },
                "trades": {
                  "description": "Whether or not to include trades related to position in output",
                  "type": "boolean",
                  "default": false
                }
              }
            }
          }
        }
      },
      "volume": {
        "required": true,
        "content": {
          "application/x-www-form-urlencoded": {
            "schema": {
              "title": "Get Trade Volume",
              "required": [
                "nonce"
              ],
              "type": "object",
              "properties": {
                "nonce": {
                  "$ref": "#/components/schemas/nonce"
                },
                "pair": {
                  "description": "Comma delimited list of asset pairs to get fee info on (optional, but required if any fee info is desired)",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "API-Key": [],
      "API-Sign": []
    }
  ],
  "tags": [
    {
      "name": "Market Data",
      "description": "Note: As of 31st Jan 2024, the undocumented use of POST requests to /0/public/* endpoints will be deprecated to improve the performance of our systems and experience for consumers of the API. The endpoints will now return a 4xx error when accessed with a POST request instead of a GET."
    },
    {
      "name": "Account Data"
    },
    {
      "name": "Trading"
    },
    {
      "name": "Funding"
    },
    {
      "name": "Subaccounts",
      "description": "Subaccounts are currently only available to institutional clients. Please contact your Account Manager for more details."
    },
    {
      "name": "Earn",
      "description": "The earn API allows interacting with all of Kraken's yield generating products. It replaces the old `/staking` part of the API.\n\nThe different available earn products are represented by earn strategies. This corresponds to the legacy `Staking/Assets`. `Stake`/`Unstake` are replaced by `Allocate`/`Deallocate`.\n\n### Overview of the available endpoints under `/Earn`:\n\n- `Strategies` - list all earn strategies for which you are eligible or have a balance.\n- `Allocations` - lists the balance in your earn account for each strategy. Requires the `Query Funds` API key permission.\n- `Allocate`/`Deallocate` - allocate/deallocate to an earn strategy through an async operation. Requires the `Earn Funds` API key permission.\n- `AllocateStatus`/`DeallocateStatus` - verifies the state of the last allocation/deallocation. Requires the `Earn Funds` or `Query Funds` API key permission.\n\n### Example usage:\n\n### Determine which funds are earning rewards:\n\n1. Call `Strategies` to obtain information about the relevant strategy. The `lock_type` field shows whether bonding/unbonding funds are earning yield. The relevant fields are `bonding_rewards`/`unbonding_rewards`.\n2. Call `Allocations` for the relevant strategy. From the previous step, for strategies where bonding/unbonding does not earn yield, substract these balances from `amount_allocated.total` to determine which balances are currently earning.\n\n### Get allocatable balance:\n\nCall `/0/private/BalanceEx`, subtract `hold_trading` amount. Remaining balance is available for allocation to a strategy.\n\n### Geo restrictions:\n\nSome earn strategies are not available in all geographic regions. `Strategies` will return only strategies available to the caller.\n"
    },
    {
      "name": "Staking",
      "description": "DEPRECATED - Please use the Earn endpoints.\n"
    },
    {
      "name": "Websockets Authentication"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Public Endpoints",
      "tags": [
        "Market Data"
      ]
    },
    {
      "name": "Authenticated Endpoints",
      "tags": [
        "Account Data",
        "Trading",
        "Funding",
        "Subaccounts",
        "Earn",
        "Staking",
        "Websockets Authentication"
      ]
    }
  ]
}